{"version":3,"sources":["../../source/library/worker-client.js"],"names":["Configuration","ForkedProcess","WorkerClientModuleHandler","WorkerClientParameter","DefaultChangeCase","ModuleChangeCase","WorkerClientDurationExceededError","WorkerClientRejectedError","WorkerClientDisconnectedError","WorkerClientInternalError","WorkerClientExitedError","WorkerClientKilledError","PascalCase","WorkerClient","constructor","parameter","getConstructorParameter","_isReady","_module","Proxy","_defaultOption","merge","_onMessage","message","methodName","type","_onReady","emit","_onPing","_onApply","_onError","error","_onReject","_onDisconnect","_onExit","code","_onKill","signal","maximumDuration","option","value","module","whenReady","whenMessageType","Promise","resolve","reject","onMessage","onReject","timeout","on","off","clearTimeout","setTimeout","whenRejected","errorClass","send","requestMessage","responsePromise","sendPromise","responseMessage","all","returnValue","ping","apply","disconnect","exit","kill"],"mappings":"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","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { ForkedProcess } from './forked-process.js'\nimport { WorkerClientModuleHandler } from './worker-client-module-handler.js'\nimport { WorkerClientParameter } from './worker-client-parameter.js'\nimport DefaultChangeCase, * as ModuleChangeCase from 'change-case'\n\nimport { WorkerClientDurationExceededError } from './error/worker-client-duration-exceeded-error.js'\nimport { WorkerClientRejectedError } from './error/worker-client-rejected-error.js'\nimport { WorkerClientDisconnectedError } from './error/worker-client-disconnected-error.js'\nimport { WorkerClientInternalError } from './error/worker-client-internal-error.js'\nimport { WorkerClientExitedError } from './error/worker-client-exited-error.js'\nimport { WorkerClientKilledError } from './error/worker-client-killed-error.js'\n\nconst { 'pascalCase': PascalCase } = DefaultChangeCase || ModuleChangeCase\n\nclass WorkerClient extends ForkedProcess {\n\n  constructor(...parameter) {\n    super(...WorkerClientParameter.getConstructorParameter(...parameter))\n\n    this._isReady = false\n\n    this._module = new Proxy(this, WorkerClientModuleHandler)\n\n  }\n\n  get _defaultOption() {\n    return Configuration.merge(super._defaultOption, { 'maximumDuration': 10000 })\n  }\n\n  _onMessage(message) {\n\n    let methodName = `_on${PascalCase(message.type)}`\n    this[methodName](message)\n\n    super._onMessage(message)\n\n  }\n\n  _onReady(message) {\n    this.emit('ready', message)\n  }\n\n  _onPing(message) {\n    this.emit('ping', message)\n  }\n\n  _onApply(message) {\n    this.emit('apply', message)\n  }\n\n  _onError(error) {\n    this._onReject(new WorkerClientInternalError(error))\n    super._onError(error)\n  }\n\n  _onDisconnect() {\n    this._onReject(new WorkerClientDisconnectedError())\n    super._onDisconnect()\n  }\n\n  _onExit(code) {\n    this._onReject(new WorkerClientExitedError(code))\n    super._onExit(code)\n  }\n\n  _onKill(signal) {\n    this._onReject(new WorkerClientKilledError(signal))\n    super._onKill(signal)\n  }\n\n  _onReject(error) {\n    this.emit('reject', error)\n  }\n\n  get maximumDuration() {\n    return this.option.maximumDuration\n  }\n\n  set maximumDuration(value) {\n    this.option.maximumDuration = value\n  }\n\n  get module() {\n    return this._module\n  }\n\n  async whenReady() {\n\n    if (!this._isReady) {\n      await this.whenMessageType('ready')\n      this._isReady = true\n    }\n\n  }\n\n  whenMessageType(type) {\n    // this.console.log(`WorkerClient.whenMessageType('${type}') { ... }`)\n\n    return new Promise((resolve, reject) => {\n\n      let onMessage = null\n      let onReject = null\n      let timeout = null\n   \n      this.on('message', onMessage = (message) => {\n        // this.console.log('WorkerClient.on(\\'message\\', onMessage = (message) => { ... })')\n        // this.console.dir(message)\n\n        if (message.type === type) {\n\n          this.off('message', onMessage)\n          onMessage = null\n\n          this.off('reject', onReject)\n          onReject = null\n\n          if (this.maximumDuration > 0) {\n            clearTimeout(timeout)\n            timeout = null\n          }\n          \n          resolve(message)\n    \n        }\n\n      })\n\n      this.on('reject', onReject = (error) => {\n        // this.console.error('WorkerClient.on(\\'reject\\', onReject = (error) => { ... })')\n        // this.console.error(error)\n  \n        this.off('message', onMessage)\n        onMessage = null\n\n        this.off('reject', onReject)\n        onReject = null\n\n        if (this.maximumDuration > 0) {\n          clearTimeout(timeout)\n          timeout = null\n        }\n      \n        reject(error)\n  \n      })\n\n      if (this.maximumDuration > 0) {\n  \n        timeout = setTimeout(() => {\n\n          this.off('message', onMessage)\n          onMessage = null\n  \n          this.off('reject', onReject)\n          onReject = null\n  \n          clearTimeout(timeout)\n          timeout = null\n          \n          reject(new WorkerClientDurationExceededError(this.maximumDuration))\n    \n        }, this.maximumDuration)\n  \n      }\n\n    })\n\n  }\n\n  whenRejected(errorClass = WorkerClientRejectedError) {\n    // this.console.log(`WorkerClient.whenRejected(${errorClass.name}) { ... }`)\n\n    return new Promise((resolve, reject) => {\n\n      let onReject = null\n      let timeout = null\n\n      this.on('reject', onReject = (error) => {\n        // this.console.error('WorkerClient.on(\\'reject\\', onReject = (error) => { ... })')\n        // this.console.error(error)\n\n        if (error instanceof errorClass) {\n\n          this.off('reject', onReject)\n          onReject = null\n  \n          if (this.maximumDuration > 0) {\n            clearTimeout(timeout)\n            timeout = null\n          }\n        \n          resolve(error)\n  \n        }\n  \n      })\n\n      if (this.maximumDuration > 0) {\n  \n        timeout = setTimeout(() => {\n\n          this.off('reject', onReject)\n          onReject = null\n\n          clearTimeout(timeout)\n          timeout = null\n          \n          reject(new WorkerClientDurationExceededError(this.maximumDuration))\n    \n        }, this.maximumDuration)\n\n      }\n\n    })\n\n  }\n\n  async send(requestMessage) {\n\n    let responsePromise = this.whenMessageType(requestMessage.type)\n    let sendPromise = super.send(requestMessage)\n\n    let [, responseMessage] = await Promise.all([ sendPromise, responsePromise ])\n\n    if (responseMessage.error) {\n      throw responseMessage.error\n    }\n\n    return responseMessage.returnValue\n\n  }\n\n  async ping() {\n    await this.whenReady()\n    return this.send({ 'type': 'ping' })\n  }\n\n  async apply(methodName, parameter) {\n    await this.whenReady()\n    return this.send({ 'type': 'apply', 'methodName': methodName, 'parameter': parameter })\n  }\n\n  disconnect() {\n    super.disconnect()\n    return this.whenRejected(WorkerClientDisconnectedError)\n  }\n\n  async exit(code = 0) {\n    await this.whenReady()\n    await super.send({ 'type': 'exit', 'code': code }) // there will be no response\n    await this.whenRejected(WorkerClientExitedError)\n  }\n\n  kill(...parameter) {\n    super.kill(...parameter)\n    return this.whenRejected(WorkerClientKilledError)\n  }\n\n}\n\nexport { WorkerClient }"],"file":"worker-client.js"}