{"version":3,"sources":["../../source/library/child-process-pool.js"],"names":["Configuration","Console","Is","EventEmitter","FileSystem","OS","Stream","ChildProcess","Null","Process","process","ChildProcessPool","constructor","userPath","userParameter","userOption","path","parameter","getParameter","_defaultParameter","option","getOption","_defaultOption","numberOfProcess","cpus","length","processInformation","Array","fill","map","value","index","_createProcessInformation","_processPath","_processParameter","_processOption","_processInformation","_console","_stream","_streamOption","forEach","_attachProcessInformation","_createProcess","merge","env","_recreateProcess","processPath","processParameter","processOption","stream","streamOption","_detachProcessInformation","numberOfCreate","maximumNumberOfCreate","not","null","writeTo","on","__onError","error","_onError","__onDisconnect","log","_onDisconnect","__onExit","code","_onExit","__onKill","signal","_onKill","off","emit","_selectProcess","_getProcess","_getConnectedProcess","filter","isConnected","Writable","createWriteStream","disconnect","kill"],"mappings":"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","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { Console } from 'console'\nimport { Is } from '@virtualpatterns/mablung-is'\nimport EventEmitter from 'events'\nimport FileSystem from 'fs-extra'\nimport OS from 'os'\nimport Stream from 'stream'\n\nimport { ChildProcess } from './child-process.js'\nimport { Null } from './null.js'\n\nconst Process = process\n\nclass ChildProcessPool extends EventEmitter {\n\n  constructor(userPath, userParameter = {}, userOption = {}) {\n    super()\n\n    let path = userPath\n    let parameter = Configuration.getParameter(this._defaultParameter, userParameter)\n    let option = Configuration.getOption(this._defaultOption, userOption)\n\n    let numberOfProcess = option.numberOfProcess || OS.cpus().length - 1\n    let processInformation = (new Array(numberOfProcess)).fill().map((value, index) => this._createProcessInformation(index, path, parameter, option))\n\n    this._processPath = path\n    this._processParameter = parameter\n    this._processOption = option\n\n    this._processInformation = processInformation\n\n    this._console = new Null()\n\n    this._stream = null\n    this._streamOption = null\n    \n    this._processInformation.forEach((processInformation) => this._attachProcessInformation(processInformation))\n\n  }\n\n  _createProcessInformation(index, path, parameter, option) {\n\n    return {\n      'index': index,\n      'numberOfCreate': 0,\n      'process': this._createProcess(index, path, parameter, option)\n    }\n\n  }\n\n  _createProcess(index, path, parameter, option) {\n    return new ChildProcess(path, parameter, Configuration.merge(option, { 'env': Configuration.merge(Process.env, { 'CHILD_PROCESS_POOL_INDEX': index }) }))\n  }\n\n  _recreateProcess(processInformation) {\n\n    let index = processInformation.index\n\n    let processPath = this._processPath\n    let processParameter = this._processParameter\n    let processOption = this._processOption\n\n    let stream = this._stream\n    let streamOption = this._streamOption\n\n    this._detachProcessInformation(processInformation)\n\n    if (processInformation.numberOfCreate < processOption.maximumNumberOfCreate) {\n\n      processInformation.process = this._createProcess(index, processPath, processParameter, processOption)\n      processInformation.numberOfCreate++\n\n      this._attachProcessInformation(processInformation)\n\n      if (Is.not.null(stream)) {\n        processInformation.process.writeTo(stream, streamOption)\n      }\n\n    }\n\n  }\n\n  _attachProcessInformation(processInformation) {\n    \n    let { index, process } = processInformation\n\n    process.on('error', processInformation.__onError = (error) => {\n      this._console.error('ChildProcessPool.on(\\'error\\', processInformation.__onError = (error) => { ... })')\n      this._console.error(error)\n  \n      try {\n        this._onError(index, process, error)\n        // do not recreate on error\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('disconnect', processInformation.__onDisconnect = () => {\n      this._console.log('ChildProcessPool.on(\\'disconnect\\', processInformation.__onDisconnect = () => { ... })')\n  \n      try {\n        this._onDisconnect(index, process)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('exit', processInformation.__onExit = (code) => {\n      this._console.log(`ChildProcessPool.on('exit', processInformation.__onExit = (${code}) => { ... })`)\n\n      try {\n\n        this._onExit(index, process, code)\n\n        if (code > 0) {\n          this._recreateProcess(processInformation)\n        }\n\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('kill', processInformation.__onKill = (signal) => {\n      this._console.log(`ChildProcessPool.on('kill', processInformation.__onKill = ('${signal}') => { ... })`)\n\n      try {\n        this._onKill(index, process, signal)\n        this._recreateProcess(processInformation)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n  }\n\n  _detachProcessInformation(processInformation) {\n    \n    let { process } = processInformation\n\n    if (processInformation.__onKill) {\n      process.off('kill', processInformation.__onKill)\n      delete processInformation.__onKill\n    }\n\n    if (processInformation.__onExit) {\n      process.off('exit', processInformation.__onExit)\n      delete processInformation.__onExit\n    }\n\n    if (processInformation.__onDisconnect) {\n      process.off('disconnect', processInformation.__onDisconnect)\n      delete processInformation.__onDisconnect\n    }\n\n    if (processInformation.__onError) {\n      process.off('error', processInformation.__onError)\n      delete processInformation.__onError\n    }\n\n  }\n\n  _onError(index, process, error) {\n    this.emit('error', index, process, error)\n  }\n\n  _onDisconnect(index, process) {\n    this.emit('disconnect', index, process)\n  }\n\n  _onExit(index, process, code) {\n    this.emit('exit', index, process, code)\n  }\n\n  _onKill(index, process, signal) {\n    this.emit('kill', index, process, signal)\n  }\n\n  get _defaultParameter() {\n    return {}\n  }\n\n  /* c8 ignore next 3 */\n  get parameter() {\n    return this._processParameter\n  }\n\n  get _defaultOption() {\n    return {\n      'maximumNumberOfCreate': 3,\n      'numberOfProcess': OS.cpus().length - 1\n    }\n  }\n\n  get option() {\n    return this._processOption\n  }\n\n  get maximumNumberOfCreate() {\n    return this._processOption.maximumNumberOfCreate\n  }\n\n  get numberOfProcess() {\n    return this._processOption.numberOfProcess\n  }\n\n  _selectProcess() {}\n\n  _getProcess(index) {\n    return this._processInformation[index].process\n  }\n\n  _getConnectedProcess() {\n    return this._processInformation\n      .filter(({ process }) => process.isConnected)\n      .map(({ process }) => process)\n  }\n\n  writeTo(path, option = { 'autoClose': true, 'emitClose': true, 'encoding': 'utf8', 'flags': 'a+' }) {\n \n    let stream = null\n\n    switch (true) {\n      /* c8 ignore next 3 */\n      case path instanceof Stream.Writable:\n        stream = path\n        break\n      default:\n        stream = FileSystem.createWriteStream(path, option)\n    }\n\n    this._processInformation.forEach(({ process }) => process.writeTo(stream, option))\n\n    this._console = new Console({\n      'colorMode': false,\n      'ignoreErrors': false,\n      'stderr': stream,\n      'stdout': stream\n    })\n\n    this._stream = stream\n    this._streamOption = option\n        \n  }\n\n  disconnect() {\n    this._getConnectedProcess().forEach((process) => process.disconnect())\n  }\n\n  signal(signal) {\n    this._getConnectedProcess().forEach((process) => process.signal(signal))\n  }\n\n  kill(signal = 'SIGINT') {\n    this.signal(signal)\n  }\n\n}\n\nexport { ChildProcessPool }"],"file":"child-process-pool.js"}