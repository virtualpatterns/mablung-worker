{"version":3,"sources":["../../source/library/child-process-pool.js"],"names":["Process","process","ChildProcessPool","EventEmitter","constructor","userPath","userParameter","userOption","path","parameter","Configuration","getParameter","_defaultParameter","option","getOption","_defaultOption","numberOfProcess","OS","cpus","length","processInformation","Array","fill","map","value","index","_createProcessInformation","_processPath","_processParameter","_processOption","_processInformation","_console","Null","_stream","_streamOption","forEach","_attachProcessInformation","_createProcess","ChildProcess","merge","env","_recreateProcess","processPath","processParameter","processOption","stream","streamOption","_detachProcessInformation","numberOfCreate","maximumNumberOfCreate","Is","not","null","writeTo","on","__onError","error","_onError","__onDisconnect","log","_onDisconnect","__onExit","code","_onExit","__onKill","signal","_onKill","off","emit","_selectProcess","_getProcess","_getConnectedProcess","filter","isConnected","Stream","Writable","FileSystem","createWriteStream","Console","disconnect","kill"],"mappings":"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","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { Console } from 'console'\nimport { Is } from '@virtualpatterns/mablung-is'\nimport EventEmitter from 'events'\nimport FileSystem from 'fs-extra'\nimport OS from 'os'\nimport Stream from 'stream'\n\nimport { ChildProcess } from './child-process.js'\nimport { Null } from './null.js'\n\nconst Process = process\n\nclass ChildProcessPool extends EventEmitter {\n\n  constructor(userPath, userParameter = {}, userOption = {}) {\n    super()\n\n    let path = userPath\n    let parameter = Configuration.getParameter(this._defaultParameter, userParameter)\n    let option = Configuration.getOption(this._defaultOption, userOption)\n\n    let numberOfProcess = option.numberOfProcess || OS.cpus().length - 1\n    let processInformation = (new Array(numberOfProcess)).fill().map((value, index) => this._createProcessInformation(index, path, parameter, option))\n\n    this._processPath = path\n    this._processParameter = parameter\n    this._processOption = option\n\n    this._processInformation = processInformation\n\n    this._console = new Null()\n\n    this._stream = null\n    this._streamOption = null\n    \n    this._processInformation.forEach((processInformation) => this._attachProcessInformation(processInformation))\n\n  }\n\n  _createProcessInformation(index, path, parameter, option) {\n\n    return {\n      'index': index,\n      'numberOfCreate': 0,\n      'process': this._createProcess(index, path, parameter, option)\n    }\n\n  }\n\n  _createProcess(index, path, parameter, option) {\n    return new ChildProcess(path, parameter, Configuration.merge(option, { 'env': Configuration.merge(Process.env, { 'CHILD_PROCESS_POOL_INDEX': index }) }))\n  }\n\n  _recreateProcess(processInformation) {\n\n    let index = processInformation.index\n\n    let processPath = this._processPath\n    let processParameter = this._processParameter\n    let processOption = this._processOption\n\n    let stream = this._stream\n    let streamOption = this._streamOption\n\n    this._detachProcessInformation(processInformation)\n\n    if (processInformation.numberOfCreate < processOption.maximumNumberOfCreate) {\n\n      processInformation.process = this._createProcess(index, processPath, processParameter, processOption)\n      processInformation.numberOfCreate++\n\n      this._attachProcessInformation(processInformation)\n\n      if (Is.not.null(stream)) {\n        processInformation.process.writeTo(stream, streamOption)\n      }\n\n    }\n\n  }\n\n  _attachProcessInformation(processInformation) {\n    \n    let { index, process } = processInformation\n\n    process.on('error', processInformation.__onError = (error) => {\n      this._console.error('ChildProcessPool.on(\\'error\\', processInformation.__onError = (error) => { ... })')\n      this._console.error(error)\n  \n      try {\n        this._onError(index, process, error)\n        // do not recreate on error\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('disconnect', processInformation.__onDisconnect = () => {\n      this._console.log('ChildProcessPool.on(\\'disconnect\\', processInformation.__onDisconnect = () => { ... })')\n  \n      try {\n        this._onDisconnect(index, process)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('exit', processInformation.__onExit = (code) => {\n      this._console.log(`ChildProcessPool.on('exit', processInformation.__onExit = (${code}) => { ... })`)\n\n      try {\n\n        this._onExit(index, process, code)\n\n        if (code > 0) {\n          this._recreateProcess(processInformation)\n        }\n\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('kill', processInformation.__onKill = (signal) => {\n      this._console.log(`ChildProcessPool.on('kill', processInformation.__onKill = ('${signal}') => { ... })`)\n\n      try {\n        this._onKill(index, process, signal)\n        this._recreateProcess(processInformation)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n  }\n\n  _detachProcessInformation(processInformation) {\n    \n    let { process } = processInformation\n\n    if (processInformation.__onKill) {\n      process.off('kill', processInformation.__onKill)\n      delete processInformation.__onKill\n    }\n\n    if (processInformation.__onExit) {\n      process.off('exit', processInformation.__onExit)\n      delete processInformation.__onExit\n    }\n\n    if (processInformation.__onDisconnect) {\n      process.off('disconnect', processInformation.__onDisconnect)\n      delete processInformation.__onDisconnect\n    }\n\n    if (processInformation.__onError) {\n      process.off('error', processInformation.__onError)\n      delete processInformation.__onError\n    }\n\n  }\n\n  _onError(index, process, error) {\n    this.emit('error', index, process, error)\n  }\n\n  _onDisconnect(index, process) {\n    this.emit('disconnect', index, process)\n  }\n\n  _onExit(index, process, code) {\n    this.emit('exit', index, process, code)\n  }\n\n  _onKill(index, process, signal) {\n    this.emit('kill', index, process, signal)\n  }\n\n  get _defaultParameter() {\n    return {}\n  }\n\n  /* c8 ignore next 3 */\n  get parameter() {\n    return this._processParameter\n  }\n\n  get _defaultOption() {\n    return {\n      'maximumNumberOfCreate': 3,\n      'numberOfProcess': OS.cpus().length - 1\n    }\n  }\n\n  get option() {\n    return this._processOption\n  }\n\n  get maximumNumberOfCreate() {\n    return this._processOption.maximumNumberOfCreate\n  }\n\n  get numberOfProcess() {\n    return this._processOption.numberOfProcess\n  }\n\n  _selectProcess() {}\n\n  _getProcess(index) {\n    return this._processInformation[index].process\n  }\n\n  _getConnectedProcess() {\n    return this._processInformation\n      .filter(({ process }) => process.isConnected)\n      .map(({ process }) => process)\n  }\n\n  writeTo(path, option = { 'autoClose': true, 'emitClose': true, 'encoding': 'utf8', 'flags': 'a+' }) {\n \n    let stream = null\n\n    switch (true) {\n      /* c8 ignore next 3 */\n      case path instanceof Stream.Writable:\n        stream = path\n        break\n      default:\n        stream = FileSystem.createWriteStream(path, option)\n    }\n\n    this._processInformation.forEach(({ process }) => process.writeTo(stream, option))\n\n    this._console = new Console({\n      'colorMode': false,\n      'ignoreErrors': false,\n      'stderr': stream,\n      'stdout': stream\n    })\n\n    this._stream = stream\n    this._streamOption = option\n        \n  }\n\n  disconnect() {\n    this._getConnectedProcess().forEach((process) => process.disconnect())\n  }\n\n  signal(signal) {\n    this._getConnectedProcess().forEach((process) => process.signal(signal))\n  }\n\n  kill(signal = 'SIGINT') {\n    this.signal(signal)\n  }\n\n}\n\nexport { ChildProcessPool }"],"file":"child-process-pool.cjs"}