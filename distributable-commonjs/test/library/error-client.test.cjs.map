{"version":3,"sources":["../../../source/test/library/error-client.test.js"],"names":["test","Is","windows","throws","ErrorClient","worker","error","whenRejected","WorkerClientInternalError","is","internalError","code"],"mappings":";;AAAA;;AACA;;AAEA;;AAEA;;;;AAEA,kBAAK,mBAAL,EAA0B,MAAOA,IAAP,IAAgB;AAExC,MAAIC,cAAGC,OAAH,EAAJ,EAAkB;AAChBF,IAAAA,IAAI,CAACG,MAAL,CAAY,MAAM,IAAIC,wBAAJ,EAAlB,EAAqC;AAAE,cAAQ;AAAV,KAArC;AACD,GAFD,MAEO;AAEL,QAAIC,MAAM,GAAG,IAAID,wBAAJ,EAAb;AACA,QAAIE,KAAK,GAAG,MAAMD,MAAM,CAACE,YAAP,CAAoBC,gCAApB,CAAlB;AAEAR,IAAAA,IAAI,CAACS,EAAL,CAAQH,KAAK,CAACI,aAAN,CAAoBC,IAA5B,EAAkC,QAAlC;AAED;AAEF,CAbD","sourcesContent":["import { Is } from '@virtualpatterns/mablung-is'\nimport Test from 'ava'\n\nimport { ErrorClient } from './error-client.js'\n\nimport { WorkerClientInternalError } from '../../index.js'\n\nTest('new ErrorClient()', async (test) => {\n\n  if (Is.windows()) {\n    test.throws(() => new ErrorClient(), { 'code': 'UNKNOWN'})\n  } else {\n\n    let worker = new ErrorClient()\n    let error = await worker.whenRejected(WorkerClientInternalError)\n  \n    test.is(error.internalError.code, 'EACCES')\n\n  }\n\n})\n"],"file":"error-client.test.cjs"}