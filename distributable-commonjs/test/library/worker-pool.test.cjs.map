{"version":3,"sources":["../../../source/test/library/worker-pool.test.js"],"names":["Require","require","test","pool","notThrows","WorkerPool","notThrowsAsync","exit","longMaximumDuration","is","maximumDuration","shortMaximumDuration","sandbox","Sinon","createSandbox","resolve","spy","module","getPid","true","_selectProcess","calledOnce","calledWith","restore","ping","throwsAsync","WorkerPoolDisconnectedError","Promise","setTimeout","throwUncaughtException","rejectUnhandledException","disconnect","LoggedPool","kill"],"mappings":"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","sourcesContent":["import Sinon from 'sinon'\nimport Test from 'ava'\n\nimport { LoggedPool } from './logged-pool.js'\nimport { WorkerPool } from '../../index.js'\n\nimport { WorkerPoolDisconnectedError } from '../../index.js'\n\nconst Require = __require\n\nTest('new WorkerPool()', async (test) => {\n\n  let pool = null\n  \n  test.notThrows(() => { pool = new WorkerPool()})\n  await test.notThrowsAsync(pool.exit())\n\n})\n\nTest('new WorkerPool({ \\'maximumDuration\\': N })', async (test) => {\n\n  let longMaximumDuration = 15000\n  let pool = new WorkerPool({ 'maximumDuration': longMaximumDuration})\n\n  try {\n    test.is(pool.maximumDuration, longMaximumDuration)\n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool.maximumDuration', async (test) => {\n\n  let shortMaximumDuration = 5000\n  let longMaximumDuration = 15000\n\n  let pool = new WorkerPool()\n\n  try {\n\n    pool.maximumDuration = shortMaximumDuration\n    test.is(pool.maximumDuration, shortMaximumDuration)\n    pool.maximumDuration = longMaximumDuration\n\n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool._selectProcess(methodName, parameter)', async (test) => {\n\n  const sandbox = Sinon.createSandbox()\n\n  try {\n\n    let pool = new WorkerPool(Require.resolve('./worker.js'))\n\n    try {\n\n      sandbox.spy(pool, '_selectProcess')\n\n      await pool.module.getPid()\n\n      test.true(pool._selectProcess.calledOnce)\n      test.true(pool._selectProcess.calledWith('getPid', []))\n\n    } finally {\n      await pool.exit()\n    }\n  \n  } finally {\n    sandbox.restore()\n  }\n\n})\n\nTest('WorkerPool.ping()', async (test) => {\n\n  let pool = new WorkerPool()\n\n  try {\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool.ping() throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n\n  await pool.exit()\n  await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.exit(option)', async (test) => {\n  await test.notThrowsAsync((new WorkerPool()).exit())\n})\n\nTest('WorkerPool.exit(option) throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n\n  await pool.exit()\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.exit(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.module.throwUncaughtException()', async (test) => {\n\n  let pool = new WorkerPool(Require.resolve('./worker.js'), { 'numberOfProcess': 1 })\n\n  try {\n    await test.notThrowsAsync(pool.module.throwUncaughtException()) // the pool should recreate exited processes\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool.module.rejectUnhandledException()', async (test) => {\n\n  // this test requires that the node process exit when a Promise rejection is unhandled\n  // as established by the --unhandled-rejections=strict parameter to node\n\n  let pool = new WorkerPool(Require.resolve('./worker.js'), { 'numberOfProcess': 1 })\n\n  try {\n    await test.notThrowsAsync(pool.module.rejectUnhandledException()) // the pool should recreate exited processes\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool.disconnect()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  await test.notThrowsAsync(pool.disconnect()) // disconnect causes a normal code = 0 exit, the pool will not recreate exited processes\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.disconnect() throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  await test.notThrowsAsync(pool.disconnect()) // disconnect causes a normal code = 0 exit, the pool will not recreate exited processes\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.disconnect(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.kill()', async (test) => {\n\n  // use LoggedPool so that the if condition of _recreateProcess regarding the stream is called\n\n  let pool = new LoggedPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  try {\n\n    await test.notThrowsAsync(pool.kill()) // the pool should recreate killed processes\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    await test.notThrowsAsync(pool.ping())\n  \n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool.kill() throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  await test.notThrowsAsync(pool.disconnect()) // disconnect causes a normal code = 0 exit, the pool will not recreate exited processes\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.kill(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n"],"file":"worker-pool.test.cjs"}