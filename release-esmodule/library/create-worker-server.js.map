{"version":3,"sources":["../../source/library/create-worker-server.js"],"names":["Command","FileSystem","JSON5","Path","Process","process","Require","_createRequire","import","meta","url","Package","parse","readFileSync","resolve","console","log","version","option","argv","workerServerClass","opts","workerServerClassPath","default","importPath"],"mappings":"yDAAA,OAAO,qDAAP;AACA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,IAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA;AACA;;AAEA,MAAMC,OAAO,GAAGC,OAAhB;AACA,MAAMC,OAAO,GATbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CASd;;AAEA,MAAMC,OAAO,GAAGT,KAAK,CAACU,KAAN,CAAYX,UAAU,CAACY,YAAX,CAAwBP,OAAO,CAACQ,OAAR,CAAgB,oBAAhB,CAAxB,EAA+D,EAAE,YAAY,OAAd,EAA/D,CAAZ,CAAhB;;AAEC,CAAC,YAAY;;AAEZC,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAO,CAACQ,OAAR,CAAgB,oBAAhB,CAAZ;;AAEAd,EAAAA,OAAO,CAACiB,OAAR,CAAgBN,OAAO,CAACM,OAAxB;AACAjB,EAAAA,OAAO,CAACkB,MAAR,CAAe,mCAAf,EAAoD,2CAApD,EAAiGZ,OAAO,CAACQ,OAAR,CAAgB,oBAAhB,CAAjG;AACAd,EAAAA,OAAO,CAACkB,MAAR,CAAe,sBAAf,EAAuC,8BAAvC,EAAuEZ,OAAO,CAACQ,OAAR,CAAgB,aAAhB,CAAvE;;AAEAd,EAAAA,OAAO,CAACY,KAAR,CAAcR,OAAO,CAACe,IAAtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,iBAAiB,GAAG,IAAxB;AACAA,EAAAA,iBAAiB,GAAG,MAAM,OAAOpB,OAAO,CAACqB,IAAR,GAAeC,qBAAtB,CAA1B,CApBY,CAoB2D;AACvEF,EAAAA,iBAAiB,GAAGA,iBAAiB,CAACG,OAAlB,IAA6BH,iBAAjD;;AAEA;AACA;;AAEA,QAAO,IAAIA,iBAAJ,EAAD,CAA0BZ,MAA1B,CAAiCR,OAAO,CAACqB,IAAR,GAAeG,UAAhD,CAAN;;AAED,CA5BA","sourcesContent":["import '@virtualpatterns/mablung-source-map-support/install'\nimport Command from 'commander'\nimport FileSystem from 'fs'\nimport JSON5 from 'json5'\nimport Path from 'path'\n// import URL from 'url'\n// import Utilities from 'util'\n\nconst Process = process\nconst Require = __require\n\nconst Package = JSON5.parse(FileSystem.readFileSync(Require.resolve('../../package.json'), { 'encoding': 'utf-8' }))\n\n;(async () => {\n\n  console.log(Require.resolve('./worker-server.js'))\n\n  Command.version(Package.version)\n  Command.option('--worker-server-class-path <path>', 'Path to the server class to import/create', Require.resolve('./worker-server.js'))\n  Command.option('--import-path <path>', 'Path to the module to import', Require.resolve('./worker.js'))\n\n  Command.parse(Process.argv)\n\n  // console.log('-'.repeat(80))\n  // console.log(`Process.version               = '${Process.version}'`)\n  // console.log(`Package.version               = 'v${Package.version}'`)\n  // console.log(`Process.argv[0]               = '${Process.argv[0]}'`)\n  // console.log(`Process.execArgv              = ${Utilities.inspect(Process.execArgv)}`)\n  // console.log(`Process.argv[1]               = '${Path.relative(Process.cwd(), Process.argv[1])}'`)\n  // console.log(`Command.opts().workerServerClassPath = '${Path.relative(Process.cwd(), Command.opts().workerServerClassPath)}'`)\n  // console.log(`Command.opts().importPath            = '${Path.relative(Process.cwd(), Command.opts().importPath)}'`)\n\n  let workerServerClass = null\n  workerServerClass = await import(Command.opts().workerServerClassPath) // URL.pathToFileURL(Command.opts().workerServerClassPath))\n  workerServerClass = workerServerClass.default || workerServerClass\n\n  // console.log(`workerServerClass.name        = ${workerServerClass.name}`)\n  // console.log('-'.repeat(80))\n\n  await (new workerServerClass()).import(Command.opts().importPath)\n\n})()\n"],"file":"create-worker-server.js"}