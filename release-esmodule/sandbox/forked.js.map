{"version":3,"sources":["../../source/sandbox/forked.js"],"names":["Configuration","Console","FileSystem","Process","process","outputStream","createWriteStream","errorStream","_console","on","error","log","close","dir","argv","_onMessage","message","off","setTimeout","exit"],"mappings":"AAAA,SAASA,aAAT,QAA8B,wCAA9B;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAOC,UAAP,MAAuB,IAAvB;;AAEA,MAAMC,OAAO,GAAGC,OAAhB;;AAEA,IAAIC,YAAY,GAAG,IAAnB;AACAA,YAAY,GAAGH,UAAU,CAACI,iBAAX,CAA6B,cAA7B,EAA6C,EAAE,YAAY,MAAd,EAA7C,CAAf;;AAEA,IAAIC,WAAW,GAAG,IAAlB;AACAA,WAAW,GAAGL,UAAU,CAACI,iBAAX,CAA6B,cAA7B,EAA6C,EAAE,YAAY,MAAd,EAA7C,CAAd;;AAEA,IAAIE,QAAQ,GAAG,IAAIP,OAAJ,CAAY;AACzB,eAAa,KADY;AAEzB,kBAAgB,KAFS;AAGzB,YAAUM,WAHe;AAIzB,YAAUF,YAJe,EAAZ,CAAf;;;AAOAF,OAAO,CAACM,EAAR,CAAW,mBAAX,EAAiCC,KAAD,IAAW;AACzCF,EAAAA,QAAQ,CAACE,KAAT,CAAe,6DAAf;AACAF,EAAAA,QAAQ,CAACE,KAAT,CAAeA,KAAf;AACD,CAHD;;AAKAP,OAAO,CAACM,EAAR,CAAW,MAAX,EAAmB,MAAM;AACvBD,EAAAA,QAAQ,CAACG,GAAT,CAAa,2CAAb;AACAH,EAAAA,QAAQ,CAACE,KAAT,CAAe,2CAAf;;AAEAL,EAAAA,YAAY,CAACO,KAAb;AACAL,EAAAA,WAAW,CAACK,KAAZ;;AAED,CAPD;;AASAJ,QAAQ,CAACG,GAAT,CAAa,MAAb;AACAH,QAAQ,CAACK,GAAT,CAAaV,OAAO,CAACW,IAArB;AACAN,QAAQ,CAACE,KAAT,CAAe,MAAf;;AAEA,IAAIK,UAAU,GAAG,IAAjB;;AAEAZ,OAAO,CAACM,EAAR,CAAW,SAAX,EAAsBM,UAAU,GAAIC,OAAD,IAAa;AAC9CR,EAAAA,QAAQ,CAACG,GAAT,CAAa,kEAAb;AACAH,EAAAA,QAAQ,CAACK,GAAT,CAAaG,OAAb;;AAEAb,EAAAA,OAAO,CAACc,GAAR,CAAY,SAAZ,EAAuBF,UAAvB;AACAA,EAAAA,UAAU,GAAG,IAAb;;AAEAG,EAAAA,UAAU,CAAC,MAAM;AACff,IAAAA,OAAO,CAACgB,IAAR;AACD,GAFS,EAEP,IAFO,CAAV;;AAID,CAXD","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { Console } from 'console'\nimport FileSystem from 'fs'\n\nconst Process = process\n\nlet outputStream = null\noutputStream = FileSystem.createWriteStream('./forked.out', { 'encoding': 'utf8' })\n\nlet errorStream = null\nerrorStream = FileSystem.createWriteStream('./forked.err', { 'encoding': 'utf8' })\n\nlet _console = new Console({\n  'colorMode': false,\n  'ignoreErrors': false,\n  'stderr': errorStream,\n  'stdout': outputStream\n})\n\nProcess.on('uncaughtException', (error) => {\n  _console.error('CHILD Process.on(\\'uncaughtException\\', (error) => { ... })')\n  _console.error(error)\n})\n\nProcess.on('exit', () => {\n  _console.log('CHILD Process.on(\\'exit\\', () => { ... })')\n  _console.error('CHILD Process.on(\\'exit\\', () => { ... })')\n\n  outputStream.close()\n  errorStream.close()\n \n})\n\n_console.log('HELO')\n_console.dir(Process.argv)\n_console.error('HELO')\n\nlet _onMessage = null\n\nProcess.on('message', _onMessage = (message) => {\n  _console.log('CHILD Process.on(\\'message\\', _onMessage = (message) => { ... })')\n  _console.dir(message)\n\n  Process.off('message', _onMessage)\n  _onMessage = null\n\n  setTimeout(() => {\n    Process.exit()\n  }, 2500)\n\n})\n"],"file":"forked.js"}