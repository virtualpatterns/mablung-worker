{"version":3,"sources":["../../source/sandbox/p.js"],"names":["FileSystem","Path","WorkerClient","WorkerPool","Process","process","Require","_createRequire","import","meta","url","once","code","console","log","main","logPath","ensureDirSync","dirname","pool","resolve","writeTo","dir","ping","module","getIndex","exit","error"],"mappings":"yDAAA,OAAO,qDAAP;AACA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAASC,YAAT,QAA8B,6BAA9B;;AAEA,SAASC,UAAT,QAA4B,2BAA5B;AACA;AACA;;AAEA,MAAMC,OAAO,GAAGC,OAAhB;AACA,MAAMC,OAAO,GAXbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CAWd;;AAEAN,OAAO,CAACO,IAAR,CAAa,MAAb,EAAsBC,IAAD,IAAU;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAa,yBAAwBF,IAAK,eAA1C;AACD,CAFD;;AAIA,eAAeG,IAAf,GAAsB;;AAEpB,MAAI;;AAEF,QAAIC,OAAO,GAAG,wBAAd;AACAhB,IAAAA,UAAU,CAACiB,aAAX,CAAyBhB,IAAI,CAACiB,OAAL,CAAaF,OAAb,CAAzB;;AAEA,QAAIG,IAAI,GAAG,IAAX;AACAA,IAAAA,IAAI,GAAG,IAAIhB,UAAJ,CAAeG,OAAO,CAACc,OAAR,CAAgB,cAAhB,CAAf,CAAP,CANE,CAMqD;;AAEvD,QAAI;;AAEFD,MAAAA,IAAI,CAACE,OAAL,CAAaL,OAAb;;AAEAH,MAAAA,OAAO,CAACS,GAAR,CAAY,MAAMH,IAAI,CAACI,IAAL,EAAlB;AACAV,MAAAA,OAAO,CAACS,GAAR,CAAY,MAAMH,IAAI,CAACK,MAAL,CAAYC,QAAZ,EAAlB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAED,KAxDD,SAwDU;AACR,YAAMN,IAAI,CAACO,IAAL,EAAN;AACD;;AAEF,GApED,CAoEE,OAAOC,KAAP,EAAc;AACdd,IAAAA,OAAO,CAACc,KAAR,CAAcA,KAAd;AACD;;AAEF;;AAEDZ,IAAI","sourcesContent":["import '@virtualpatterns/mablung-source-map-support/install'\nimport FileSystem from 'fs-extra'\nimport Path from 'path'\n\nimport { WorkerClient  } from '../library/worker-client.js'\n\nimport { WorkerPool  } from '../library/worker-pool.js'\n// import { NextWorkerPool  } from '../library/worker-pool/next-worker-pool.js'\n// import { RandomWorkerPool  } from '../library/worker-pool/random-worker-pool.js'\n\nconst Process = process\nconst Require = __require\n\nProcess.once('exit', (code) => {\n  console.log(`Process.once('exit', (${code}) => { ... })`)\n})\n\nasync function main() {\n\n  try {\n\n    let logPath = './process/log/pool.log'\n    FileSystem.ensureDirSync(Path.dirname(logPath))\n\n    let pool = null\n    pool = new WorkerPool(Require.resolve('./worker1.js')) // { 'numberOfProcess': 0 })\n\n    try {\n\n      pool.writeTo(logPath)\n\n      console.dir(await pool.ping())\n      console.dir(await pool.module.getIndex())\n\n      // await worker._process[0].process.unhandledRejection() // kill()\n      // console.dir(await worker.ping())\n\n      // await worker.getWorkerClient(1).end()\n\n      // console.log('> worker.getWorkerClient(index).end()')\n      // for (let index = 0; index < 25; index++) {\n      //   await worker.getWorkerClient(index).end()\n      // }\n      // console.log('> worker.getWorkerClient(index).end()')\n\n      // console.dir(await worker.ping())\n\n      // await worker.import(Require.resolve('./worker1.js'))\n\n      // try {\n\n      //   // let promise = []\n\n      //   // for (let index = 0; index < worker.numberOfWorkerClient; index++) {\n      //   //   promise.push(worker.module.getPid())\n      //   //   await new Promise((resolve) => setTimeout(resolve, 100))\n      //   // }\n\n      //   // let pid = null\n      //   // pid = await Promise.all(promise)\n\n      //   // pid.forEach((pid) => {\n      //   //   console.log(`worker.module.getPid() = ${pid}`)\n      //   // })\n\n      //   // await worker.connectedProcess[5].process.end()\n      //   // await worker.connectedProcess[5].process.end()\n\n      //   for (let index = 0; index < worker.numberOfProcess; index++) {\n        \n      //     let _index = await worker.module.getIndex()\n      //     console.log(`worker.module.getIndex() = ${_index}`)\n\n      //     worker.getProcess(_index).process.end()\n\n      //     // console.log(`worker.module.getPid() = ${await worker.module.getPid()}`)\n\n      //   }\n\n      // } finally {\n      //   await worker.release()\n      // }\n\n    } finally {\n      await pool.exit()\n    }\n      \n  } catch (error) {\n    console.error(error)\n  }\n\n}\n\nmain()\n"],"file":"p.js"}