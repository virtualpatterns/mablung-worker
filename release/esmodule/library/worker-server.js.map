{"version":3,"sources":["../../../source/esmodule/library/worker-server.js"],"names":[],"mappings":"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","file":"worker-server.js","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { Is } from '@virtualpatterns/mablung-is'\nimport DefaultChangeCase, * as ModuleChangeCase from 'change-case'\n// import URL from 'url'\n\nimport { WorkerServerNoIPCChannelError } from './error/worker-server-no-ipc-channel-error.js'\n\nconst { 'pascalCase': PascalCase } = DefaultChangeCase || ModuleChangeCase\nconst Process = process\n\nclass WorkerServer {\n\n  constructor(userOption = {}) {\n\n    this._option = Configuration.getOption(this.defaultOption, userOption)\n\n    this._module = null\n    this._modulePath = null\n\n    this._attach()\n\n  }\n\n  get defaultOption() {\n    return { 'readyInterval': 1000 }\n  }\n\n  _attach() {\n\n    Process.on('message', this.__onMessage = async (message) => {\n      // console.log('WorkerServer.on(\\'message\\', this.__onMessage = async (message) => { ... })')\n      // console.dir(message)\n\n      try {\n        this._detachReadyInterval()   \n        await this._onMessage(message) \n      /* c8 ignore next 3 */\n      } catch(error) {\n        console.error(error)\n      }\n\n    })\n\n    Process.on('disconnect', this.__onDisconnect = () => {\n      // console.log('WorkerServer.on(\\'disconnect\\', this.__onDisconnect = () => { ... })')\n\n      try {\n        this._detachReadyInterval()   \n        this._detachDisconnect()    \n      /* c8 ignore next 3 */\n      } catch(error) {\n        console.error(error)\n      }\n      \n    })\n\n    Process.on('exit', this.__onExit = (/* code */) => {\n      // console.log(`WorkerServer.on('exit', this.__onExit = (${code}) => { ... })`)\n\n      try {\n        this._detach()\n      /* c8 ignore next 3 */\n      } catch(error) {\n        console.error(error)\n      }\n        \n    })\n\n    this._readyInterval = setInterval(async () => {\n\n      try {\n        await this.send({ 'type': 'ready' })\n      /* c8 ignore next 4 */\n      } catch (error) {\n        this._detachReadyInterval()\n        console.error(error)\n      }\n\n    }, this._option.readyInterval)\n\n  }\n\n  _detachReadyInterval() {\n\n    if (this._readyInterval) {\n      clearInterval(this._readyInterval)\n      delete this._readyInterval\n    }\n\n  }\n\n  _detachDisconnect() {\n\n    if (this.__onDisconnect) {\n      Process.off('disconnect', this.__onDisconnect)\n      delete this.__onDisconnect\n    }\n\n  }\n\n  _detach() {\n\n    this._detachReadyInterval()    \n\n    if (this.__onExit) {\n      Process.off('exit', this.__onExit)\n      delete this.__onExit\n    }\n\n    this._detachDisconnect()\n\n    if (this.__onMessage) {\n      Process.off('message', this.__onMessage)\n      delete this.__onMessage\n    }\n\n  }\n\n  async import(path) {\n\n    let module = null\n    module = await import(path) // URL.pathToFileURL(path))\n    module = module.default || module\n\n    this._module = module\n    this._modulePath = path\n\n  }\n\n  send(message) {\n    // console.log('WorkerServer.send(message) { ... }')\n    // console.dir(message)\n\n    return new Promise((resolve, reject) => {\n\n      if (Process.send) {\n\n        Process.send(message, (error) => {\n\n          if (Is.null(error)) {\n            resolve()\n          /* c8 ignore next 3 */\n          } else {\n            reject(error)\n          }\n\n        })\n\n      /* c8 ignore next 3 */\n      } else {\n        reject(new WorkerServerNoIPCChannelError())\n      }\n\n    })\n\n  }\n\n  _onMessage(message) {\n    let methodName = `_on${PascalCase(message.type)}`\n    return this[methodName](message)\n  }\n\n  async _onPing(message) {\n\n    let cpuUsage = null\n    cpuUsage = Process.cpuUsage()\n    cpuUsage = (cpuUsage.user + cpuUsage.system) / 2.0\n\n    message.returnValue = { 'index': Process.env.WORKER_POOL_INDEX ? parseInt(Process.env.WORKER_POOL_INDEX) : 0, 'pid': Process.pid, 'cpuUsage': cpuUsage }\n\n    await this.send(message)\n\n  }\n\n  async _onApply(message) {\n\n    try {\n\n      let returnValue = null\n      returnValue = this._module[message.methodName].apply(this._module, message.parameter)\n      returnValue = returnValue instanceof Promise ? await returnValue : returnValue\n\n      delete message.error\n      message.returnValue = returnValue\n\n    } catch (error) {\n\n      message.error = error\n      delete message.returnValue\n\n    }\n\n    await this.send(message)\n\n  }\n\n  async _onExit(message) {\n\n    try {\n      Process.exit(message.code || 0)\n    /* c8 ignore next 3 */\n    } catch (error) {\n      console.error(error)\n    }\n\n  }\n\n}\n\nexport default WorkerServer"]}