{"version":3,"sources":["../../../source/esmodule/library/worker-pool.js"],"names":[],"mappings":"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","file":"worker-pool.js","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { Is } from '@virtualpatterns/mablung-is'\n\nimport { ChildProcessPool } from './child-process-pool.js'\nimport { WorkerClient } from './worker-client.js'\nimport { WorkerPoolModuleHandler } from './worker-pool-module-handler.js'\nimport { WorkerPoolParameter } from './worker-pool-parameter.js'\n\nimport { WorkerPoolDisconnectedError } from './error/worker-pool-disconnected-error.js'\n\nconst Process = process\n\nclass WorkerPool extends ChildProcessPool {\n\n  constructor(...parameter) {\n    super(...WorkerPoolParameter.getConstructorParameter(...parameter))\n\n    this._module = new Proxy(this, WorkerPoolModuleHandler)\n    \n  }\n\n  _createProcess(index, path, parameter, option) {\n    return new WorkerClient(path, parameter, Configuration.merge(option, { 'env': Configuration.merge(Process.env, { 'WORKER_POOL_INDEX': index }) }))\n  }\n\n  async _selectProcess(/* methodName, parameter */) {\n    let { index } = await this.ping()\n    return this._getProcess(index)\n  }\n\n  get maximumDuration() {\n    return this.option.maximumDuration\n  }\n\n  set maximumDuration(value) {\n    this.option.maximumDuration = value\n    this._getConnectedProcess().forEach((workerClient) => workerClient.maximumDuration = value)\n  }\n\n  get module() {\n    return this._module\n  }\n\n  async ping() {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n\n      let pingResult = null\n      pingResult = await Promise.all(process.map((workerClient) => workerClient.ping()))\n      pingResult = pingResult.reduce((minimumResult, result) => Is.null(minimumResult) || result.cpuUsage < minimumResult.cpuUsage ? result : minimumResult, null)\n  \n      return pingResult\n\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n  \n  async apply(methodName, parameter) {\n    return (await this._selectProcess(methodName, parameter)).apply(methodName, parameter)\n  }\n\n  async disconnect() {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n      return Promise.all(process.map((workerClient) => workerClient.disconnect()))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  async exit(code = 0) {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n      return Promise.all(process.map((workerClient) => workerClient.exit(code)))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  async kill(...parameter) {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n      return Promise.all(process.map((workerClient) => workerClient.kill(...parameter)))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n}\n\nexport { WorkerPool }"]}