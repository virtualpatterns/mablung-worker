{"version":3,"sources":["../../../../source/esmodule/test/library/worker-pool.test.js"],"names":[],"mappings":"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","file":"worker-pool.test.js","sourcesContent":["import Sinon from 'sinon'\nimport Test from 'ava'\n\nimport { LoggedPool } from './logged-pool.js'\nimport { WorkerPool } from '../../index.js'\n\nimport { WorkerPoolDisconnectedError } from '../../index.js'\n\nconst Require = __require\n\nTest('new WorkerPool()', async (test) => {\n\n  let pool = null\n  \n  test.notThrows(() => { pool = new WorkerPool()})\n  await test.notThrowsAsync(pool.exit())\n\n})\n\nTest('new WorkerPool({ \\'maximumDuration\\': N })', async (test) => {\n\n  let longMaximumDuration = 15000\n  let pool = new WorkerPool({ 'maximumDuration': longMaximumDuration})\n\n  try {\n    test.is(pool.maximumDuration, longMaximumDuration)\n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool.maximumDuration', async (test) => {\n\n  let shortMaximumDuration = 5000\n  let longMaximumDuration = 15000\n\n  let pool = new WorkerPool()\n\n  try {\n\n    pool.maximumDuration = shortMaximumDuration\n    test.is(pool.maximumDuration, shortMaximumDuration)\n    pool.maximumDuration = longMaximumDuration\n\n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool._selectProcess(methodName, parameter)', async (test) => {\n\n  const sandbox = Sinon.createSandbox()\n\n  try {\n\n    let pool = new WorkerPool(Require.resolve('./worker.js'))\n\n    try {\n\n      sandbox.spy(pool, '_selectProcess')\n\n      await pool.module.getPid()\n\n      test.true(pool._selectProcess.calledOnce)\n      test.true(pool._selectProcess.calledWith('getPid', []))\n\n    } finally {\n      await pool.exit()\n    }\n  \n  } finally {\n    sandbox.restore()\n  }\n\n})\n\nTest('WorkerPool.ping()', async (test) => {\n\n  let pool = new WorkerPool()\n\n  try {\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest.only('WorkerPool.ping() throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n\n  await pool.exit()\n  await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.exit(option)', async (test) => {\n  await test.notThrowsAsync((new WorkerPool()).exit())\n})\n\nTest('WorkerPool.exit(option) throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n\n  await pool.exit()\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.exit(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.module.throwUncaughtException()', async (test) => {\n\n  let pool = new WorkerPool(Require.resolve('./worker.js'), { 'numberOfProcess': 1 })\n\n  try {\n    await test.notThrowsAsync(pool.module.throwUncaughtException()) // the pool should recreate exited processes\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool.module.rejectUnhandledException()', async (test) => {\n\n  // this test requires that the node process exit when a Promise rejection is unhandled\n  // as established by the --unhandled-rejections=strict parameter to node\n\n  let pool = new WorkerPool(Require.resolve('./worker.js'), { 'numberOfProcess': 1 })\n\n  try {\n    await test.notThrowsAsync(pool.module.rejectUnhandledException()) // the pool should recreate exited processes\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool.disconnect()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  await test.notThrowsAsync(pool.disconnect()) // disconnect causes a normal code = 0 exit, the pool will not recreate exited processes\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.disconnect() throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  await test.notThrowsAsync(pool.disconnect()) // disconnect causes a normal code = 0 exit, the pool will not recreate exited processes\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.disconnect(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.kill()', async (test) => {\n\n  // use LoggedPool so that the if condition of _recreateProcess regarding the stream is called\n\n  let pool = new LoggedPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  try {\n\n    await test.notThrowsAsync(pool.kill()) // the pool should recreate killed processes\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    await test.notThrowsAsync(pool.ping())\n  \n  } finally {\n    await pool.exit()\n  }\n\n})\n\nTest('WorkerPool.kill() throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  await test.notThrowsAsync(pool.disconnect()) // disconnect causes a normal code = 0 exit, the pool will not recreate exited processes\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.kill(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n"]}