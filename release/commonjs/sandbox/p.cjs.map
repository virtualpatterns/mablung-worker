{"version":3,"sources":["../../../source/esmodule/sandbox/p.js"],"names":[],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;AAEA;;;;AACA;AACA;AAEA,MAAM,OAAO,GAAG,OAAhB;AACA,MAAM,OAAO,GAXb,OAWA;AAEA,OAAO,CAAC,IAAR,CAAa,MAAb,EAAsB,IAAD,IAAU;AAC7B,EAAA,OAAO,CAAC,GAAR,CAAa,yBAAwB,IAAK,eAA1C;AACD,CAFD;;AAIA,eAAe,IAAf,GAAsB;AAEpB,MAAI;AAEF,QAAI,OAAO,GAAG,wBAAd;;AACA,qBAAW,aAAX,CAAyB,cAAK,OAAL,CAAa,OAAb,CAAzB;;AAEA,QAAI,IAAI,GAAG,IAAX;AACA,IAAA,IAAI,GAAG,IAAI,sBAAJ,CAAe,OAAO,CAAC,OAAR,CAAgB,eAAhB,CAAf,CAAP,CANE,CAMqD;;AAEvD,QAAI;AAEF,MAAA,IAAI,CAAC,OAAL,CAAa,OAAb;AAEA,MAAA,OAAO,CAAC,GAAR,CAAY,MAAM,IAAI,CAAC,IAAL,EAAlB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,MAAM,IAAI,CAAC,MAAL,CAAY,QAAZ,EAAlB,EALE,CAOF;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAED,KAxDD,SAwDU;AACR,YAAM,IAAI,CAAC,IAAL,EAAN;AACD;AAEF,GApED,CAoEE,OAAO,KAAP,EAAc;AACd,IAAA,OAAO,CAAC,KAAR,CAAc,KAAd;AACD;AAEF;;AAED,IAAI","file":"p.cjs","sourcesContent":["import '@virtualpatterns/mablung-source-map-support/install'\nimport FileSystem from 'fs-extra'\nimport Path from 'path'\n\nimport { WorkerClient  } from '../library/worker-client.js'\n\nimport { WorkerPool  } from '../library/worker-pool.js'\n// import { NextWorkerPool  } from '../library/worker-pool/next-worker-pool.js'\n// import { RandomWorkerPool  } from '../library/worker-pool/random-worker-pool.js'\n\nconst Process = process\nconst Require = __require\n\nProcess.once('exit', (code) => {\n  console.log(`Process.once('exit', (${code}) => { ... })`)\n})\n\nasync function main() {\n\n  try {\n\n    let logPath = './process/log/pool.log'\n    FileSystem.ensureDirSync(Path.dirname(logPath))\n\n    let pool = null\n    pool = new WorkerPool(Require.resolve('./worker1.js')) // { 'numberOfProcess': 0 })\n\n    try {\n\n      pool.writeTo(logPath)\n\n      console.dir(await pool.ping())\n      console.dir(await pool.module.getIndex())\n\n      // await worker._process[0].process.unhandledRejection() // kill()\n      // console.dir(await worker.ping())\n\n      // await worker.getWorkerClient(1).end()\n\n      // console.log('> worker.getWorkerClient(index).end()')\n      // for (let index = 0; index < 25; index++) {\n      //   await worker.getWorkerClient(index).end()\n      // }\n      // console.log('> worker.getWorkerClient(index).end()')\n\n      // console.dir(await worker.ping())\n\n      // await worker.import(Require.resolve('./worker1.js'))\n\n      // try {\n\n      //   // let promise = []\n\n      //   // for (let index = 0; index < worker.numberOfWorkerClient; index++) {\n      //   //   promise.push(worker.module.getPid())\n      //   //   await new Promise((resolve) => setTimeout(resolve, 100))\n      //   // }\n\n      //   // let pid = null\n      //   // pid = await Promise.all(promise)\n\n      //   // pid.forEach((pid) => {\n      //   //   console.log(`worker.module.getPid() = ${pid}`)\n      //   // })\n\n      //   // await worker.connectedProcess[5].process.end()\n      //   // await worker.connectedProcess[5].process.end()\n\n      //   for (let index = 0; index < worker.numberOfProcess; index++) {\n        \n      //     let _index = await worker.module.getIndex()\n      //     console.log(`worker.module.getIndex() = ${_index}`)\n\n      //     worker.getProcess(_index).process.end()\n\n      //     // console.log(`worker.module.getPid() = ${await worker.module.getPid()}`)\n\n      //   }\n\n      // } finally {\n      //   await worker.release()\n      // }\n\n    } finally {\n      await pool.exit()\n    }\n      \n  } catch (error) {\n    console.error(error)\n  }\n\n}\n\nmain()\n"]}