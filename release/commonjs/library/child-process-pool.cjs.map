{"version":3,"sources":["../../../source/esmodule/library/child-process-pool.js"],"names":[],"mappings":"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","file":"child-process-pool.cjs","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { Console } from 'console'\nimport { Is } from '@virtualpatterns/mablung-is'\nimport EventEmitter from 'events'\nimport FileSystem from 'fs-extra'\nimport OS from 'os'\nimport Stream from 'stream'\n\nimport { ChildProcess } from './child-process.js'\nimport { Null } from './null.js'\n\nconst Process = process\n\nclass ChildProcessPool extends EventEmitter {\n\n  constructor(userPath, userParameter = {}, userOption = {}) {\n    super()\n\n    let path = userPath\n    let parameter = Configuration.getParameter(this._defaultParameter, userParameter)\n    let option = Configuration.getOption(this._defaultOption, userOption)\n\n    let numberOfProcess = option.numberOfProcess || OS.cpus().length - 1\n    let processInformation = (new Array(numberOfProcess)).fill().map((value, index) => this._createProcessInformation(index, path, parameter, option))\n\n    this._processPath = path\n    this._processParameter = parameter\n    this._processOption = option\n\n    this._processInformation = processInformation\n\n    this._console = new Null()\n\n    this._stream = null\n    this._streamOption = null\n    \n    this._processInformation.forEach((processInformation) => this._attachProcessInformation(processInformation))\n\n  }\n\n  _createProcessInformation(index, path, parameter, option) {\n\n    return {\n      'index': index,\n      'numberOfCreate': 0,\n      'process': this._createProcess(index, path, parameter, option)\n    }\n\n  }\n\n  _createProcess(index, path, parameter, option) {\n    return new ChildProcess(path, parameter, Configuration.merge(option, { 'env': Configuration.merge(Process.env, { 'CHILD_PROCESS_POOL_INDEX': index }) }))\n  }\n\n  _recreateProcess(processInformation) {\n\n    let index = processInformation.index\n\n    let processPath = this._processPath\n    let processParameter = this._processParameter\n    let processOption = this._processOption\n\n    let stream = this._stream\n    let streamOption = this._streamOption\n\n    this._detachProcessInformation(processInformation)\n\n    if (processInformation.numberOfCreate < processOption.maximumNumberOfCreate) {\n\n      processInformation.process = this._createProcess(index, processPath, processParameter, processOption)\n      processInformation.numberOfCreate++\n\n      this._attachProcessInformation(processInformation)\n\n      if (Is.not.null(stream)) {\n        processInformation.process.writeTo(stream, streamOption)\n      }\n\n    }\n\n  }\n\n  _attachProcessInformation(processInformation) {\n    \n    let { index, process } = processInformation\n\n    process.on('error', processInformation.__onError = (error) => {\n      this._console.error('ChildProcessPool.on(\\'error\\', processInformation.__onError = (error) => { ... })')\n      this._console.error(error)\n  \n      try {\n        this._onError(index, process, error)\n        // do not recreate on error\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('disconnect', processInformation.__onDisconnect = () => {\n      this._console.log('ChildProcessPool.on(\\'disconnect\\', processInformation.__onDisconnect = () => { ... })')\n  \n      try {\n        this._onDisconnect(index, process)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('exit', processInformation.__onExit = (code) => {\n      this._console.log(`ChildProcessPool.on('exit', processInformation.__onExit = (${code}) => { ... })`)\n\n      try {\n\n        this._onExit(index, process, code)\n\n        if (code > 0) {\n          this._recreateProcess(processInformation)\n        }\n\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('kill', processInformation.__onKill = (signal) => {\n      this._console.log(`ChildProcessPool.on('kill', processInformation.__onKill = ('${signal}') => { ... })`)\n\n      try {\n        this._onKill(index, process, signal)\n        this._recreateProcess(processInformation)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n  }\n\n  _detachProcessInformation(processInformation) {\n    \n    let { process } = processInformation\n\n    if (processInformation.__onKill) {\n      process.off('kill', processInformation.__onKill)\n      delete processInformation.__onKill\n    }\n\n    if (processInformation.__onExit) {\n      process.off('exit', processInformation.__onExit)\n      delete processInformation.__onExit\n    }\n\n    if (processInformation.__onDisconnect) {\n      process.off('disconnect', processInformation.__onDisconnect)\n      delete processInformation.__onDisconnect\n    }\n\n    if (processInformation.__onError) {\n      process.off('error', processInformation.__onError)\n      delete processInformation.__onError\n    }\n\n  }\n\n  _onError(index, process, error) {\n    this.emit('error', index, process, error)\n  }\n\n  _onDisconnect(index, process) {\n    this.emit('disconnect', index, process)\n  }\n\n  _onExit(index, process, code) {\n    this.emit('exit', index, process, code)\n  }\n\n  _onKill(index, process, signal) {\n    this.emit('kill', index, process, signal)\n  }\n\n  get _defaultParameter() {\n    return {}\n  }\n\n  /* c8 ignore next 3 */\n  get parameter() {\n    return this._processParameter\n  }\n\n  get _defaultOption() {\n    return {\n      'maximumNumberOfCreate': 3,\n      'numberOfProcess': OS.cpus().length - 1\n    }\n  }\n\n  get option() {\n    return this._processOption\n  }\n\n  get maximumNumberOfCreate() {\n    return this._processOption.maximumNumberOfCreate\n  }\n\n  get numberOfProcess() {\n    return this._processOption.numberOfProcess\n  }\n\n  _selectProcess() {}\n\n  _getProcess(index) {\n    return this._processInformation[index].process\n  }\n\n  _getConnectedProcess() {\n    return this._processInformation\n      .filter(({ process }) => process.isConnected)\n      .map(({ process }) => process)\n  }\n\n  writeTo(path, option = { 'autoClose': true, 'emitClose': true, 'encoding': 'utf8', 'flags': 'a+' }) {\n \n    let stream = null\n\n    switch (true) {\n      /* c8 ignore next 3 */\n      case path instanceof Stream.Writable:\n        stream = path\n        break\n      default:\n        stream = FileSystem.createWriteStream(path, option)\n    }\n\n    this._processInformation.forEach(({ process }) => process.writeTo(stream, option))\n\n    this._console = new Console({\n      'colorMode': false,\n      'ignoreErrors': false,\n      'stderr': stream,\n      'stdout': stream\n    })\n\n    this._stream = stream\n    this._streamOption = option\n        \n  }\n\n  disconnect() {\n    this._getConnectedProcess().forEach((process) => process.disconnect())\n  }\n\n  signal(signal) {\n    this._getConnectedProcess().forEach((process) => process.signal(signal))\n  }\n\n  kill(signal = 'SIGINT') {\n    this.signal(signal)\n  }\n\n}\n\nexport { ChildProcessPool }"]}