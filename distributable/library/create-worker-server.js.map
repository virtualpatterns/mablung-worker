{"version":3,"sources":["../../source/library/create-worker-server.js"],"names":["Command","FileSystem","JSON5","Path","URL","Utilities","Process","process","Require","_createRequire","import","meta","url","Package","parse","readFileSync","resolve","version","option","argv","console","log","repeat","inspect","execArgv","relative","cwd","workerServerClassPath","importPath","workerServerClass","pathToFileURL","default","name"],"mappings":"yDAAA,OAAO,qDAAP;AACA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,IAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAOC,SAAP,MAAsB,MAAtB;;AAEA,MAAMC,OAAO,GAAGC,OAAhB;AACA,MAAMC,OAAO,GATbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CASd;;AAEA,MAAMC,OAAO,GAAGX,KAAK,CAACY,KAAN,CAAYb,UAAU,CAACc,YAAX,CAAwBP,OAAO,CAACQ,OAAR,CAAgB,oBAAhB,CAAxB,EAA+D,EAAE,YAAY,OAAd,EAA/D,CAAZ,CAAhB;;AAEC,CAAC,YAAY;;AAEZhB,EAAAA,OAAO,CAACiB,OAAR,CAAgBJ,OAAO,CAACI,OAAxB;AACAjB,EAAAA,OAAO,CAACkB,MAAR,CAAe,mCAAf,EAAoD,2CAApD,EAAiGV,OAAO,CAACQ,OAAR,CAAgB,oBAAhB,CAAjG;AACAhB,EAAAA,OAAO,CAACkB,MAAR,CAAe,sBAAf,EAAuC,8BAAvC,EAAuEV,OAAO,CAACQ,OAAR,CAAgB,aAAhB,CAAvE;;AAEAhB,EAAAA,OAAO,CAACc,KAAR,CAAcR,OAAO,CAACa,IAAtB;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAIC,MAAJ,CAAW,EAAX,CAAZ;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAa,oCAAmCf,OAAO,CAACW,OAAQ,GAAhE;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAa,qCAAoCR,OAAO,CAACI,OAAQ,GAAjE;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAa,oCAAmCf,OAAO,CAACa,IAAR,CAAa,CAAb,CAAgB,GAAhE;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,mCAAkChB,SAAS,CAACkB,OAAV,CAAkBjB,OAAO,CAACkB,QAA1B,CAAoC,EAAnF;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAa,oCAAmClB,IAAI,CAACsB,QAAL,CAAcnB,OAAO,CAACoB,GAAR,EAAd,EAA6BpB,OAAO,CAACa,IAAR,CAAa,CAAb,CAA7B,CAA8C,GAA9F;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,oCAAmClB,IAAI,CAACsB,QAAL,CAAcnB,OAAO,CAACoB,GAAR,EAAd,EAA6B1B,OAAO,CAAC2B,qBAArC,CAA4D,GAA5G;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAa,oCAAmClB,IAAI,CAACsB,QAAL,CAAcnB,OAAO,CAACoB,GAAR,EAAd,EAA6B1B,OAAO,CAAC4B,UAArC,CAAiD,GAAjG;;AAEA,MAAIC,iBAAiB,GAAG,IAAxB;AACAA,EAAAA,iBAAiB,GAAG,MAAM,OAAOzB,GAAG,CAAC0B,aAAJ,CAAkB9B,OAAO,CAAC2B,qBAA1B,CAAP,CAA1B;AACAE,EAAAA,iBAAiB,GAAGA,iBAAiB,CAACE,OAAlB,GAA4BF,iBAAiB,CAACE,OAA9C,GAAwDF,iBAA5E;;AAEAT,EAAAA,OAAO,CAACC,GAAR,CAAa,mCAAkCQ,iBAAiB,CAACG,IAAK,EAAtE;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAIC,MAAJ,CAAW,EAAX,CAAZ;;AAEA,QAAO,IAAIO,iBAAJ,EAAD,CAA0BnB,MAA1B,CAAiCV,OAAO,CAAC4B,UAAzC,CAAN;;AAED,CA1BA","sourcesContent":["import '@virtualpatterns/mablung-source-map-support/install'\nimport Command from 'commander'\nimport FileSystem from 'fs'\nimport JSON5 from 'json5'\nimport Path from 'path'\nimport URL from 'url'\nimport Utilities from 'util'\n\nconst Process = process\nconst Require = __require\n\nconst Package = JSON5.parse(FileSystem.readFileSync(Require.resolve('../../package.json'), { 'encoding': 'utf-8' }))\n\n;(async () => {\n\n  Command.version(Package.version)\n  Command.option('--worker-server-class-path <path>', 'Path to the server class to import/create', Require.resolve('./worker-server.js'))\n  Command.option('--import-path <path>', 'Path to the module to import', Require.resolve('./worker.js'))\n\n  Command.parse(Process.argv)\n\n  console.log('-'.repeat(80))\n  console.log(`Process.version               = '${Process.version}'`)\n  console.log(`Package.version               = 'v${Package.version}'`)\n  console.log(`Process.argv[0]               = '${Process.argv[0]}'`)\n  console.log(`Process.execArgv              = ${Utilities.inspect(Process.execArgv)}`)\n  console.log(`Process.argv[1]               = '${Path.relative(Process.cwd(), Process.argv[1])}'`)\n  console.log(`Command.workerServerClassPath = '${Path.relative(Process.cwd(), Command.workerServerClassPath)}'`)\n  console.log(`Command.importPath            = '${Path.relative(Process.cwd(), Command.importPath)}'`)\n\n  let workerServerClass = null\n  workerServerClass = await import(URL.pathToFileURL(Command.workerServerClassPath))\n  workerServerClass = workerServerClass.default ? workerServerClass.default : workerServerClass\n\n  console.log(`workerServerClass.name        = ${workerServerClass.name}`)\n  console.log('-'.repeat(80))\n\n  await (new workerServerClass()).import(Command.importPath)\n\n})()\n"],"file":"create-worker-server.js"}