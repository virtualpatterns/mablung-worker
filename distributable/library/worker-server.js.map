{"version":3,"sources":["../../source/library/worker-server.js"],"names":["ChangeCase","Configuration","Is","WorkerServerNoIPCChannelError","WorkerServerModuleImportedError","WorkerServerNoModuleImportedError","WorkerServerUncaughtExceptionError","WorkerServerUnhandledRejectionError","WorkerServerModuleExportError","pascalCase","PascalCase","Process","process","WorkerServer","constructor","userOption","_option","getOption","defaultOption","_module","_moduleUrl","attach","on","_onMessage","message","console","log","dir","_detachReadyInterval","onMessage","error","_onDisconnect","_detachDisconnect","_onExit","code","detach","_readyInterval","setInterval","send","readyInterval","clearInterval","off","Promise","resolve","reject","null","methodName","type","onPing","onImport","url","module","default","onApply","not","method","returnValue","apply","parameter","onRelease","onEnd","exit","onUncaughtException","setImmediate","onUnhandledRejection"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB;AACA,SAASC,aAAT,QAA8B,wCAA9B;AACA,OAAOC,EAAP,MAAe,SAAf;;AAEA,SAASC,6BAAT,QAA8C,+CAA9C;AACA,SAASC,+BAAT,QAAgD,gDAAhD;AACA,SAASC,iCAAT,QAAkD,mDAAlD;AACA,SAASC,kCAAT,QAAmD,mDAAnD;AACA,SAASC,mCAAT,QAAoD,oDAApD;AACA,SAASC,6BAAT,QAA8C,8CAA9C;;AAEA,MAAM,EAAEC,UAAU,EAAEC,UAAd,KAA6BV,UAAnC;AACA,MAAMW,OAAO,GAAGC,OAAhB;;AAEA,MAAMC,YAAN,CAAmB;;AAEjBC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EAAkB;;AAE3B,SAAKC,OAAL,GAAef,aAAa,CAACgB,SAAd,CAAwB,KAAKC,aAA7B,EAA4CH,UAA5C,CAAf;;AAEA,SAAKI,OAAL,GAAe,IAAf;AACA,SAAKC,UAAL,GAAkB,IAAlB;;AAEA,SAAKC,MAAL;;AAED;;AAED,MAAIH,aAAJ,GAAoB;AAClB,WAAO,EAAE,iBAAiB,IAAnB,EAAP;AACD;;AAEDG,EAAAA,MAAM,GAAG;;AAEPV,IAAAA,OAAO,CAACW,EAAR,CAAW,SAAX,EAAsB,KAAKC,UAAL,GAAkB,MAAOC,OAAP,IAAmB;AACzDC,MAAAA,OAAO,CAACC,GAAR,CAAY,4EAAZ;AACAD,MAAAA,OAAO,CAACE,GAAR,CAAYH,OAAZ;;AAEA,UAAI;AACF,aAAKI,oBAAL;AACA,cAAM,KAAKC,SAAL,CAAeL,OAAf,CAAN;AACF;AACC,OAJD,CAIE,OAAMM,KAAN,EAAa;AACbL,QAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACD;;AAEF,KAZD;;AAcAnB,IAAAA,OAAO,CAACW,EAAR,CAAW,YAAX,EAAyB,KAAKS,aAAL,GAAqB,MAAM;AAClDN,MAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;;AAEA,UAAI;AACF,aAAKE,oBAAL;AACA,aAAKI,iBAAL;AACF;AACC,OAJD,CAIE,OAAMF,KAAN,EAAa;AACbL,QAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACD;;AAEF,KAXD;;AAaAnB,IAAAA,OAAO,CAACW,EAAR,CAAW,MAAX,EAAmB,KAAKW,OAAL,GAAgBC,IAAD,IAAU;AAC1CT,MAAAA,OAAO,CAACC,GAAR,CAAa,2CAA0CQ,IAAK,eAA5D;;AAEA,UAAI;AACF,aAAKC,MAAL;AACF;AACC,OAHD,CAGE,OAAML,KAAN,EAAa;AACbL,QAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACD;;AAEF,KAVD;;AAYA,SAAKM,cAAL,GAAsBC,WAAW,CAAC,YAAY;;AAE5C,UAAI;AACF,cAAM,KAAKC,IAAL,CAAU,EAAE,QAAQ,OAAV,EAAV,CAAN;AACF;AACC,OAHD,CAGE,OAAOR,KAAP,EAAc;AACd,aAAKF,oBAAL;AACAH,QAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACD;;AAEF,KAVgC,EAU9B,KAAKd,OAAL,CAAauB,aAViB,CAAjC;;AAYD;;AAEDX,EAAAA,oBAAoB,GAAG;;AAErB,QAAI,KAAKQ,cAAT,EAAyB;AACvBI,MAAAA,aAAa,CAAC,KAAKJ,cAAN,CAAb;AACA,aAAO,KAAKA,cAAZ;AACD;;AAEF;;AAEDJ,EAAAA,iBAAiB,GAAG;;AAElB,QAAI,KAAKD,aAAT,EAAwB;AACtBpB,MAAAA,OAAO,CAAC8B,GAAR,CAAY,YAAZ,EAA0B,KAAKV,aAA/B;AACA,aAAO,KAAKA,aAAZ;AACD;;AAEF;;AAEDI,EAAAA,MAAM,GAAG;;AAEP,SAAKP,oBAAL;;AAEA,QAAI,KAAKK,OAAT,EAAkB;AAChBtB,MAAAA,OAAO,CAAC8B,GAAR,CAAY,MAAZ,EAAoB,KAAKR,OAAzB;AACA,aAAO,KAAKA,OAAZ;AACD;;AAED,SAAKD,iBAAL;;AAEA,QAAI,KAAKT,UAAT,EAAqB;AACnBZ,MAAAA,OAAO,CAAC8B,GAAR,CAAY,SAAZ,EAAuB,KAAKlB,UAA5B;AACA,aAAO,KAAKA,UAAZ;AACD;;AAEF;;AAEDe,EAAAA,IAAI,CAACd,OAAD,EAAU;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAD,IAAAA,OAAO,CAACE,GAAR,CAAYH,OAAZ;;AAEA,WAAO,IAAIkB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEtC,UAAIjC,OAAO,CAAC2B,IAAZ,EAAkB;;AAEhB3B,QAAAA,OAAO,CAAC2B,IAAR,CAAad,OAAb,EAAuBM,KAAD,IAAW;;AAE/B,cAAI5B,EAAE,CAAC2C,IAAH,CAAQf,KAAR,CAAJ,EAAoB;AAClBa,YAAAA,OAAO;AACT;AACC,WAHD,MAGO;AACLC,YAAAA,MAAM,CAACd,KAAD,CAAN;AACD;;AAEF,SATD;;AAWF;AACC,OAdD,MAcO;AACLc,QAAAA,MAAM,CAAC,IAAIzC,6BAAJ,EAAD,CAAN;AACD;;AAEF,KApBM,CAAP;;AAsBD;;AAED0B,EAAAA,SAAS,CAACL,OAAD,EAAU;AACjB,QAAIsB,UAAU,GAAI,KAAIpC,UAAU,CAACc,OAAO,CAACuB,IAAT,CAAe,EAA/C;AACA,WAAO,KAAKD,UAAL,EAAiBtB,OAAjB,CAAP;AACD;;AAEDwB,EAAAA,MAAM,CAACxB,OAAD,EAAU;AACd,WAAO,KAAKc,IAAL,CAAUd,OAAV,CAAP;AACD;;AAED,QAAMyB,QAAN,CAAezB,OAAf,EAAwB;;AAEtB,QAAI;;AAEF,UAAItB,EAAE,CAAC2C,IAAH,CAAQ,KAAK1B,OAAb,CAAJ,EAA2B;;AAEzB,YAAI+B,GAAG,GAAG1B,OAAO,CAAC0B,GAAlB;;AAEA,YAAIC,MAAM,GAAG,IAAb;AACAA,QAAAA,MAAM,GAAG,MAAM,OAAOD,GAAP,CAAf;AACAC,QAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,GAAiBD,MAAM,CAACC,OAAxB,GAAkCD,MAA3C;;AAEA,aAAKhC,OAAL,GAAegC,MAAf;AACA,aAAK/B,UAAL,GAAkB8B,GAAlB;;AAEA,eAAO1B,OAAO,CAACM,KAAf;;AAED,OAbD,MAaO;AACL,cAAM,IAAI1B,+BAAJ,CAAoC,KAAKgB,UAAzC,CAAN;AACD;;AAEF,KAnBD,CAmBE,OAAOU,KAAP,EAAc;AACdN,MAAAA,OAAO,CAACM,KAAR,GAAgBA,KAAhB;AACD;;AAED,UAAM,KAAKQ,IAAL,CAAUd,OAAV,CAAN;;AAED;;AAED,QAAM6B,OAAN,CAAc7B,OAAd,EAAuB;;AAErB,QAAI;;AAEF,UAAItB,EAAE,CAACoD,GAAH,CAAOT,IAAP,CAAY,KAAK1B,OAAjB,CAAJ,EAA+B;;AAE7B,YAAIoC,MAAM,GAAG,KAAKpC,OAAL,CAAaK,OAAO,CAACsB,UAArB,CAAb;;AAEA,YAAIS,MAAJ,EAAY;;AAEV,cAAIC,WAAW,GAAG,IAAlB;AACAA,UAAAA,WAAW,GAAGD,MAAM,CAACE,KAAP,CAAa,KAAKtC,OAAlB,EAA2BK,OAAO,CAACkC,SAAnC,CAAd;AACAF,UAAAA,WAAW,GAAGA,WAAW,YAAYd,OAAvB,GAAiC,MAAMc,WAAvC,GAAqDA,WAAnE;;AAEA,iBAAOhC,OAAO,CAACM,KAAf;AACAN,UAAAA,OAAO,CAACgC,WAAR,GAAsBA,WAAtB;;AAED,SATD,MASO;AACL,gBAAM,IAAIhD,6BAAJ,CAAkC,KAAKY,UAAvC,EAAmDI,OAAO,CAACsB,UAA3D,CAAN;AACD;;AAEF,OAjBD,MAiBO;AACL,cAAM,IAAIzC,iCAAJ,EAAN;AACD;;AAEF,KAvBD,CAuBE,OAAOyB,KAAP,EAAc;;AAEdN,MAAAA,OAAO,CAACM,KAAR,GAAgBA,KAAhB;AACA,aAAON,OAAO,CAACgC,WAAf;;AAED;;AAED,UAAM,KAAKlB,IAAL,CAAUd,OAAV,CAAN;;AAED;;AAED,QAAMmC,SAAN,CAAgBnC,OAAhB,EAAyB;;AAEvB,QAAI;;AAEF,UAAItB,EAAE,CAACoD,GAAH,CAAOT,IAAP,CAAY,KAAK1B,OAAjB,CAAJ,EAA+B;;AAE7B,aAAKA,OAAL,GAAe,IAAf;AACA,aAAKC,UAAL,GAAkB,IAAlB;;AAEA,eAAOI,OAAO,CAACM,KAAf;;AAED,OAPD,MAOO;AACL,cAAM,IAAIzB,iCAAJ,EAAN;AACD;;AAEF,KAbD,CAaE,OAAOyB,KAAP,EAAc;AACdN,MAAAA,OAAO,CAACM,KAAR,GAAgBA,KAAhB;AACD;;AAED,UAAM,KAAKQ,IAAL,CAAUd,OAAV,CAAN;;AAED;;AAEDoC,EAAAA,KAAK,GAAG;AACNjD,IAAAA,OAAO,CAACkD,IAAR;AACD;;AAEDC,EAAAA,mBAAmB,GAAG;AACpBC,IAAAA,YAAY,CAAC,MAAM,CAAE,MAAM,IAAIzD,kCAAJ,EAAN,CAAgD,CAAzD,CAAZ;AACD;;AAED0D,EAAAA,oBAAoB,GAAG;AACrBD,IAAAA,YAAY,CAAC,MAAMrB,OAAO,CAACE,MAAR,CAAe,IAAIrC,mCAAJ,EAAf,CAAP,CAAZ;AACD,GAnPgB;;;;AAuPnB,eAAeM,YAAf","sourcesContent":["import ChangeCase from 'change-case'\nimport { Configuration } from '@virtualpatterns/mablung-configuration'\nimport Is from '@pwn/is'\n\nimport { WorkerServerNoIPCChannelError } from './error/worker-server-no-ipc-channel-error.js'\nimport { WorkerServerModuleImportedError } from './error/worker-server-module-imported-error.js'\nimport { WorkerServerNoModuleImportedError } from './error/worker-server-no-module-imported-error.js'\nimport { WorkerServerUncaughtExceptionError } from './error/worker-server-uncaught-exception-error.js'\nimport { WorkerServerUnhandledRejectionError } from './error/worker-server-unhandled-rejection-error.js'\nimport { WorkerServerModuleExportError } from './error/worker-server-module-export-error.js'\n\nconst { pascalCase: PascalCase } = ChangeCase\nconst Process = process\n\nclass WorkerServer {\n\n  constructor(userOption = {}) {\n\n    this._option = Configuration.getOption(this.defaultOption, userOption)\n\n    this._module = null\n    this._moduleUrl = null\n\n    this.attach()\n\n  }\n\n  get defaultOption() {\n    return { 'readyInterval': 1000 }\n  }\n\n  attach() {\n\n    Process.on('message', this._onMessage = async (message) => {\n      console.log('WorkerServer.on(\\'message\\', this._onMessage = async (message) => { ... })')\n      console.dir(message)\n\n      try {\n        this._detachReadyInterval()   \n        await this.onMessage(message) \n      /* c8 ignore next 3 */\n      } catch(error) {\n        console.error(error)\n      }\n\n    })\n\n    Process.on('disconnect', this._onDisconnect = () => {\n      console.log('WorkerServer.on(\\'disconnect\\', this._onDisconnect = () => { ... })')\n\n      try {\n        this._detachReadyInterval()   \n        this._detachDisconnect()    \n      /* c8 ignore next 3 */\n      } catch(error) {\n        console.error(error)\n      }\n      \n    })\n\n    Process.on('exit', this._onExit = (code) => {\n      console.log(`WorkerServer.on('exit', this._onExit = (${code}) => { ... })`)\n\n      try {\n        this.detach()\n      /* c8 ignore next 3 */\n      } catch(error) {\n        console.error(error)\n      }\n        \n    })\n\n    this._readyInterval = setInterval(async () => {\n\n      try {\n        await this.send({ 'type': 'ready' })\n      /* c8 ignore next 4 */\n      } catch (error) {\n        this._detachReadyInterval()\n        console.error(error)\n      }\n\n    }, this._option.readyInterval)\n\n  }\n\n  _detachReadyInterval() {\n\n    if (this._readyInterval) {\n      clearInterval(this._readyInterval)\n      delete this._readyInterval\n    }\n\n  }\n\n  _detachDisconnect() {\n\n    if (this._onDisconnect) {\n      Process.off('disconnect', this._onDisconnect)\n      delete this._onDisconnect\n    }\n\n  }\n\n  detach() {\n\n    this._detachReadyInterval()    \n\n    if (this._onExit) {\n      Process.off('exit', this._onExit)\n      delete this._onExit\n    }\n\n    this._detachDisconnect()\n\n    if (this._onMessage) {\n      Process.off('message', this._onMessage)\n      delete this._onMessage\n    }\n\n  }\n\n  send(message) {\n    console.log('WorkerServer.send(message) { ... }')\n    console.dir(message)\n\n    return new Promise((resolve, reject) => {\n\n      if (Process.send) {\n\n        Process.send(message, (error) => {\n\n          if (Is.null(error)) {\n            resolve()\n          /* c8 ignore next 3 */\n          } else {\n            reject(error)\n          }\n\n        })\n\n      /* c8 ignore next 3 */\n      } else {\n        reject(new WorkerServerNoIPCChannelError())\n      }\n\n    })\n\n  }\n\n  onMessage(message) {\n    let methodName = `on${PascalCase(message.type)}`\n    return this[methodName](message)\n  }\n\n  onPing(message) {\n    return this.send(message)\n  }\n\n  async onImport(message) {\n\n    try {\n\n      if (Is.null(this._module)) {\n\n        let url = message.url\n\n        let module = null\n        module = await import(url)\n        module = module.default ? module.default : module\n  \n        this._module = module\n        this._moduleUrl = url\n\n        delete message.error\n  \n      } else {\n        throw new WorkerServerModuleImportedError(this._moduleUrl)\n      }\n\n    } catch (error) {\n      message.error = error\n    }\n\n    await this.send(message)\n\n  }\n\n  async onApply(message) {\n\n    try {\n\n      if (Is.not.null(this._module)) {\n\n        let method = this._module[message.methodName]\n\n        if (method) {\n\n          let returnValue = null\n          returnValue = method.apply(this._module, message.parameter)\n          returnValue = returnValue instanceof Promise ? await returnValue : returnValue\n  \n          delete message.error\n          message.returnValue = returnValue\n      \n        } else {\n          throw new WorkerServerModuleExportError(this._moduleUrl, message.methodName)\n        }\n\n      } else {\n        throw new WorkerServerNoModuleImportedError()\n      }\n\n    } catch (error) {\n\n      message.error = error\n      delete message.returnValue\n\n    }\n\n    await this.send(message)\n\n  }\n\n  async onRelease(message) {\n\n    try {\n\n      if (Is.not.null(this._module)) {\n\n        this._module = null\n        this._moduleUrl = null\n  \n        delete message.error\n  \n      } else {\n        throw new WorkerServerNoModuleImportedError()\n      }\n\n    } catch (error) {\n      message.error = error\n    }\n\n    await this.send(message)\n\n  }\n\n  onEnd() {\n    Process.exit()\n  }\n\n  onUncaughtException() {\n    setImmediate(() => { throw new WorkerServerUncaughtExceptionError() })\n  }\n\n  onUnhandledRejection() {\n    setImmediate(() => Promise.reject(new WorkerServerUnhandledRejectionError()))\n  }\n\n}\n\nexport default WorkerServer"],"file":"worker-server.js"}