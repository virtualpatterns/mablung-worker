{"version":3,"sources":["../../source/library/worker-server.js"],"names":["ChangeCase","Configuration","Is","URL","WorkerServerNoIPCChannelError","pascalCase","PascalCase","Process","process","WorkerServer","constructor","userOption","_option","getOption","defaultOption","_module","_modulePath","_attach","on","__onMessage","message","console","log","dir","_detachReadyInterval","_onMessage","error","__onDisconnect","_detachDisconnect","__onExit","code","_detach","_readyInterval","setInterval","send","readyInterval","clearInterval","off","import","path","module","pathToFileURL","default","Promise","resolve","reject","null","methodName","type","_onPing","cpuUsage","user","system","returnValue","env","WORKER_POOL_INDEX","parseInt","pid","_onApply","apply","parameter","_onExit","exit"],"mappings":"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","sourcesContent":["import ChangeCase from 'change-case'\nimport { Configuration } from '@virtualpatterns/mablung-configuration'\nimport Is from '@pwn/is'\nimport URL from 'url'\n\nimport { WorkerServerNoIPCChannelError } from './error/worker-server-no-ipc-channel-error.js'\n\nconst { pascalCase: PascalCase } = ChangeCase\nconst Process = process\n\nclass WorkerServer {\n\n  constructor(userOption = {}) {\n\n    this._option = Configuration.getOption(this.defaultOption, userOption)\n\n    this._module = null\n    this._modulePath = null\n\n    this._attach()\n\n  }\n\n  get defaultOption() {\n    return { 'readyInterval': 1000 }\n  }\n\n  _attach() {\n\n    Process.on('message', this.__onMessage = async (message) => {\n      console.log('WorkerServer.on(\\'message\\', this.__onMessage = async (message) => { ... })')\n      console.dir(message)\n\n      try {\n        this._detachReadyInterval()   \n        await this._onMessage(message) \n      /* c8 ignore next 3 */\n      } catch(error) {\n        console.error(error)\n      }\n\n    })\n\n    Process.on('disconnect', this.__onDisconnect = () => {\n      console.log('WorkerServer.on(\\'disconnect\\', this.__onDisconnect = () => { ... })')\n\n      try {\n        this._detachReadyInterval()   \n        this._detachDisconnect()    \n      /* c8 ignore next 3 */\n      } catch(error) {\n        console.error(error)\n      }\n      \n    })\n\n    Process.on('exit', this.__onExit = (code) => {\n      console.log(`WorkerServer.on('exit', this.__onExit = (${code}) => { ... })`)\n\n      try {\n        this._detach()\n      /* c8 ignore next 3 */\n      } catch(error) {\n        console.error(error)\n      }\n        \n    })\n\n    this._readyInterval = setInterval(async () => {\n\n      try {\n        await this.send({ 'type': 'ready' })\n      /* c8 ignore next 4 */\n      } catch (error) {\n        this._detachReadyInterval()\n        console.error(error)\n      }\n\n    }, this._option.readyInterval)\n\n  }\n\n  _detachReadyInterval() {\n\n    if (this._readyInterval) {\n      clearInterval(this._readyInterval)\n      delete this._readyInterval\n    }\n\n  }\n\n  _detachDisconnect() {\n\n    if (this.__onDisconnect) {\n      Process.off('disconnect', this.__onDisconnect)\n      delete this.__onDisconnect\n    }\n\n  }\n\n  _detach() {\n\n    this._detachReadyInterval()    \n\n    if (this.__onExit) {\n      Process.off('exit', this.__onExit)\n      delete this.__onExit\n    }\n\n    this._detachDisconnect()\n\n    if (this.__onMessage) {\n      Process.off('message', this.__onMessage)\n      delete this.__onMessage\n    }\n\n  }\n\n  async import(path) {\n\n    let module = null\n    module = await import(URL.pathToFileURL(path))\n    module = module.default ? module.default : module\n\n    this._module = module\n    this._modulePath = path\n\n  }\n\n  send(message) {\n    console.log('WorkerServer.send(message) { ... }')\n    console.dir(message)\n\n    return new Promise((resolve, reject) => {\n\n      if (Process.send) {\n\n        Process.send(message, (error) => {\n\n          if (Is.null(error)) {\n            resolve()\n          /* c8 ignore next 3 */\n          } else {\n            reject(error)\n          }\n\n        })\n\n      /* c8 ignore next 3 */\n      } else {\n        reject(new WorkerServerNoIPCChannelError())\n      }\n\n    })\n\n  }\n\n  _onMessage(message) {\n    let methodName = `_on${PascalCase(message.type)}`\n    return this[methodName](message)\n  }\n\n  async _onPing(message) {\n\n    let cpuUsage = null\n    cpuUsage = Process.cpuUsage()\n    cpuUsage = (cpuUsage.user + cpuUsage.system) / 2.0\n\n    message.returnValue = { 'index': Process.env.WORKER_POOL_INDEX ? parseInt(Process.env.WORKER_POOL_INDEX) : 0, 'pid': Process.pid, 'cpuUsage': cpuUsage }\n\n    await this.send(message)\n\n  }\n\n  // async onImport(message) {\n\n  //   try {\n\n  //     if (Is.null(this._module)) {\n\n  //       let url = message.url\n  //       let option = message.option\n\n  //       let module = null\n  //       module = await import(url)\n  //       module = module.default ? module.default : module\n\n  //       let onImport = module['onImport']\n\n  //       if (onImport) {\n\n  //         let returnValue = null\n  //         returnValue = onImport.apply(module, [ option ])\n  //         returnValue = returnValue instanceof Promise ? await returnValue : returnValue\n  \n  //         message.returnValue = returnValue\n      \n  //       }\n\n  //       delete message.error\n  \n  //       this._module = module\n  //       this._modulePath = url\n  \n  //     } else {\n  //       throw new WorkerServerModuleImportedError(this._modulePath)\n  //     }\n\n  //   } catch (error) {\n\n  //     message.error = error\n  //     delete message.returnValue\n\n  //   }\n\n  //   await this.send(message)\n\n  // }\n\n  async _onApply(message) {\n\n    try {\n\n      let returnValue = null\n      returnValue = this._module[message.methodName].apply(this._module, message.parameter)\n      returnValue = returnValue instanceof Promise ? await returnValue : returnValue\n\n      delete message.error\n      message.returnValue = returnValue\n\n    } catch (error) {\n\n      message.error = error\n      delete message.returnValue\n\n    }\n\n    await this.send(message)\n\n  }\n\n  // async onApply(message) {\n\n  //   try {\n\n  //     if (Is.not.null(this._module)) {\n\n  //       let method = this._module[message.methodName]\n\n  //       if (method) {\n\n  //         let returnValue = null\n  //         returnValue = method.apply(this._module, message.parameter)\n  //         returnValue = returnValue instanceof Promise ? await returnValue : returnValue\n  \n  //         delete message.error\n  //         message.returnValue = returnValue\n      \n  //       } else {\n  //         throw new WorkerServerModuleExportError(this._modulePath, message.methodName)\n  //       }\n\n  //     } else {\n  //       throw new WorkerServerNoModuleImportedError()\n  //     }\n\n  //   } catch (error) {\n\n  //     message.error = error\n  //     delete message.returnValue\n\n  //   }\n\n  //   await this.send(message)\n\n  // }\n\n  // async onRelease(message) {\n\n  //   try {\n\n  //     if (Is.not.null(this._module)) {\n\n  //       let option = message.option\n  //       let onRelease = this._module['onRelease']\n\n  //       if (onRelease) {\n\n  //         let returnValue = null\n  //         returnValue = onRelease.apply(this._module, [ option ])\n  //         returnValue = returnValue instanceof Promise ? await returnValue : returnValue\n  \n  //         message.returnValue = returnValue\n      \n  //       }\n  \n  //       delete message.error\n\n  //       this._module = null\n  //       this._modulePath = null\n  \n  //     } else {\n  //       throw new WorkerServerNoModuleImportedError()\n  //     }\n\n  //   } catch (error) {\n  //     message.error = error\n  //   }\n\n  //   await this.send(message)\n\n  // }\n\n  async _onExit(message) {\n\n    try {\n      Process.exit(message.code || 0)\n    /* c8 ignore next 3 */\n    } catch (error) {\n      console.error(error)\n    }\n\n  }\n\n  // onUncaughtException() {\n  //   setImmediate(() => { throw new WorkerServerUncaughtExceptionError() })\n  // }\n\n  // onUnhandledRejection() {\n  //   setImmediate(() => Promise.reject(new WorkerServerUnhandledRejectionError()))\n  // }\n\n}\n\nexport default WorkerServer"],"file":"worker-server.js"}