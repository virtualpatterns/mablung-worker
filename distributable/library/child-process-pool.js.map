{"version":3,"sources":["../../source/library/child-process-pool.js"],"names":["Configuration","Console","EventEmitter","FileSystem","Is","OS","Stream","ChildProcess","Null","Process","process","ChildProcessPool","constructor","userPath","userParameter","userOption","path","parameter","getParameter","_defaultParameter","option","getOption","_defaultOption","numberOfProcess","cpus","length","processInformation","index","push","_createProcessInformation","_processPath","_processParameter","_processOption","_processInformation","_console","_stream","_streamOption","forEach","_attachProcessInformation","_createProcess","merge","env","_recreateProcess","processPath","processParameter","processOption","stream","streamOption","_detachProcessInformation","numberOfCreate","maximumNumberOfCreate","not","null","writeTo","on","__onDisconnect","log","_onDisconnect","error","__onError","_onError","__onExit","code","_onExit","__onTerminate","signal","_onTerminate","off","emit","_selectProcess","_getProcess","_getConnectedProcess","filter","isConnected","map","Writable","createWriteStream","disconnect","kill"],"mappings":"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","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { Console } from 'console'\nimport EventEmitter from 'events'\nimport FileSystem from 'fs-extra'\nimport Is from '@pwn/is'\nimport OS from 'os'\nimport Stream from 'stream'\n\nimport { ChildProcess } from './child-process.js'\nimport { Null } from './null.js'\n\nconst Process = process\n\nclass ChildProcessPool extends EventEmitter {\n\n  constructor(userPath, userParameter = {}, userOption = {}) {\n    super()\n\n    let path = userPath\n    let parameter = Configuration.getParameter(this._defaultParameter, userParameter)\n    let option = Configuration.getOption(this._defaultOption, userOption)\n\n    let numberOfProcess = option.numberOfProcess || OS.cpus().length - 1\n    let processInformation = []\n\n    for (let index = 0; index < numberOfProcess; index++) {\n      processInformation.push(this._createProcessInformation(index, path, parameter, option))\n    }\n\n    this._processPath = path\n    this._processParameter = parameter\n    this._processOption = option\n\n    this._processInformation = processInformation\n\n    this._console = new Null()\n\n    this._stream = null\n    this._streamOption = null\n    \n    this._processInformation.forEach((processInformation) => this._attachProcessInformation(processInformation))\n\n  }\n\n  _createProcessInformation(index, path, parameter, option) {\n\n    return {\n      'index': index,\n      'numberOfCreate': 0,\n      'process': this._createProcess(index, path, parameter, option)\n    }\n\n  }\n\n  _createProcess(index, path, parameter, option) {\n    return new ChildProcess(path, parameter, Configuration.merge(option, { 'env': Configuration.merge(Process.env, { 'CHILD_PROCESS_POOL_INDEX': index }) }))\n  }\n\n  _recreateProcess(processInformation) {\n\n    let index = processInformation.index\n\n    let processPath = this._processPath\n    let processParameter = this._processParameter\n    let processOption = this._processOption\n\n    let stream = this._stream\n    let streamOption = this._streamOption\n\n    this._detachProcessInformation(processInformation)\n\n    if (processInformation.numberOfCreate < processOption.maximumNumberOfCreate) {\n\n      processInformation.process = this._createProcess(index, processPath, processParameter, processOption)\n      processInformation.numberOfCreate++\n\n      this._attachProcessInformation(processInformation)\n\n      if (Is.not.null(stream)) {\n        processInformation.process.writeTo(stream, streamOption)\n      }\n\n    }\n\n  }\n\n  _attachProcessInformation(processInformation) {\n    \n    let { index, process } = processInformation\n\n    process.on('disconnect', processInformation.__onDisconnect = () => {\n      this._console.log('ChildProcessPool.on(\\'disconnect\\', processInformation.__onDisconnect = () => { ... })')\n  \n      try {\n        this._onDisconnect(index, process)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('error', processInformation.__onError = (error) => {\n      this._console.error('ChildProcessPool.on(\\'error\\', processInformation.__onError = (error) => { ... })')\n      this._console.error(error)\n  \n      try {\n        this._onError(index, process, error)\n        // do not recreate on error\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('exit', processInformation.__onExit = (code) => {\n      this._console.log(`ChildProcessPool.on('exit', processInformation.__onExit = (${code}) => { ... })`)\n\n      try {\n\n        this._onExit(index, process, code)\n\n        if (code > 0) {\n          this._recreateProcess(processInformation)\n        }\n\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    process.on('terminate', processInformation.__onTerminate = (signal) => {\n      this._console.log(`ChildProcessPool.on('terminate', processInformation.__onTerminate = ('${signal}') => { ... })`)\n\n      try {\n        this._onTerminate(index, process, signal)\n        this._recreateProcess(processInformation)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n  }\n\n  _detachProcessInformation(processInformation) {\n    \n    let { process } = processInformation\n\n    if (processInformation.__onTerminate) {\n      process.off('terminate', processInformation.__onTerminate)\n      delete processInformation.__onTerminate\n    }\n\n    if (processInformation.__onExit) {\n      process.off('exit', processInformation.__onExit)\n      delete processInformation.__onExit\n    }\n\n    if (processInformation.__onError) {\n      process.off('error', processInformation.__onError)\n      delete processInformation.__onError\n    }\n\n    if (processInformation.__onDisconnect) {\n      process.off('disconnect', processInformation.__onDisconnect)\n      delete processInformation.__onDisconnect\n    }\n\n  }\n\n  _onDisconnect(index, process) {\n    this.emit('disconnect', index, process)\n  }\n\n  _onError(index, process, error) {\n    this.emit('error', index, process, error)\n  }\n\n  _onExit(index, process, code) {\n    this.emit('exit', index, process, code)\n  }\n\n  _onTerminate(index, process, signal) {\n    this.emit('terminate', index, process, signal)\n  }\n\n  get _defaultParameter() {\n    return {}\n  }\n\n  /* c8 ignore next 3 */\n  get parameter() {\n    return this._processParameter\n  }\n\n  get _defaultOption() {\n    return {\n      'maximumNumberOfCreate': 3,\n      'numberOfProcess': OS.cpus().length - 1\n    }\n  }\n\n  get option() {\n    return this._processOption\n  }\n\n  get maximumNumberOfCreate() {\n    return this._processOption.maximumNumberOfCreate\n  }\n\n  get numberOfProcess() {\n    return this._processOption.numberOfProcess\n  }\n\n  _selectProcess() {}\n\n  _getProcess(index) {\n    return this._processInformation[index].process\n  }\n\n  _getConnectedProcess() {\n    return this._processInformation\n      .filter(({ process }) => process.isConnected)\n      .map(({ process }) => process)\n  }\n\n  writeTo(path, option = { 'autoClose': true, 'emitClose': true, 'encoding': 'utf8', 'flags': 'a+' }) {\n \n    let stream = null\n\n    switch (true) {\n      /* c8 ignore next 3 */\n      case path instanceof Stream.Writable:\n        stream = path\n        break\n      default:\n        stream = FileSystem.createWriteStream(path, option)\n    }\n\n    this._processInformation.forEach(({ process }) => process.writeTo(stream, option))\n\n    this._console = new Console({\n      'colorMode': false,\n      'ignoreErrors': false,\n      'stderr': stream,\n      'stdout': stream\n    })\n\n    this._stream = stream\n    this._streamOption = option\n        \n  }\n\n  disconnect() {\n    this._getConnectedProcess().forEach((process) => process.disconnect())\n  }\n\n  signal(signal) {\n    this._getConnectedProcess().forEach((process) => process.signal(signal))\n  }\n\n  kill(signal = 'SIGINT') {\n    this.signal(signal)\n  }\n\n}\n\nexport { ChildProcessPool }"],"file":"child-process-pool.js"}