{"version":3,"sources":["../../source/library/child-process-pool.js"],"names":["Configuration","Console","EventEmitter","FileSystem","OS","Stream","ChildProcess","Null","Process","process","ChildProcessPool","constructor","userPath","userParameter","userOption","path","parameter","getParameter","defaultParameter","option","getOption","defaultOption","numberOfProcess","cpus","length","index","processInformation","_createProcessInformation","_attachProcess","push","_processPath","_processParameter","_processOption","_process","_console","_stream","_streamOption","_createProcess","merge","env","_recreateProcess","processPath","processParameter","processOption","stream","streamOption","_detachProcess","numberOfCreate","maximumNumberOfCreate","Infinity","writeTo","on","_onDisconnect","log","onDisconnect","error","_onError","onError","_onExit","code","onExit","_onTerminate","signal","onTerminate","off","connectedProcess","filter","isConnected","selectProcess","getProcess","Writable","createWriteStream","forEach","disconnect","kill","emit"],"mappings":"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","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { Console } from 'console'\nimport EventEmitter from 'events'\nimport FileSystem from 'fs-extra'\n// import Is from '@pwn/is'\nimport OS from 'os'\nimport Stream from 'stream'\n\nimport { ChildProcess } from './child-process.js'\nimport { Null } from './null.js'\n\nconst Process = process\n\nclass ChildProcessPool extends EventEmitter {\n\n  constructor(userPath, userParameter = {}, userOption = {}) {\n    super()\n\n    let path = userPath\n    let parameter = Configuration.getParameter(this.defaultParameter, userParameter)\n    let option = Configuration.getOption(this.defaultOption, userOption)\n\n    let numberOfProcess = option.numberOfProcess || OS.cpus().length - 1\n    let process = []\n\n    for (let index = 0; index < numberOfProcess; index++) {\n\n      let processInformation = this._createProcessInformation(index, path, parameter, option)\n\n      this._attachProcess(processInformation)\n\n      process.push(processInformation)\n\n    }\n\n    this._processPath = path\n    this._processParameter = parameter\n    this._processOption = option\n\n    this._process = process\n\n    this._console = new Null()\n    this._stream = null\n    this._streamOption = null\n    \n  }\n\n  _createProcessInformation(index, path, parameter, option) {\n\n    return {\n      'index': index,\n      'numberOfCreate': 0,\n      'process': this._createProcess(index, path, parameter, option)\n    }\n\n  }\n\n  _createProcess(index, path, parameter, option) {\n    return new ChildProcess(path, parameter, Configuration.merge(option, { 'env': Configuration.merge(Process.env, { 'CHILD_PROCESS_POOL_INDEX': index }) }))\n  }\n\n  _recreateProcess(processInformation) {\n\n    let index = processInformation.index\n\n    let processPath = this._processPath\n    let processParameter = this._processParameter\n    let processOption = this._processOption\n\n    let stream = this._stream\n    let streamOption = this._streamOption\n\n    this._detachProcess(processInformation)\n\n    if (processInformation.numberOfCreate < (processOption.maximumNumberOfCreate || Infinity)) {\n\n      processInformation.process = this._createProcess(index, processPath, processParameter, processOption)\n      processInformation.numberOfCreate++\n\n      this._attachProcess(processInformation)\n\n      if (stream) {\n        processInformation.process.writeTo(stream, streamOption)\n      }\n\n    }\n\n  }\n\n  _attachProcess(processInformation) {\n\n    processInformation.process.on('disconnect', processInformation._onDisconnect = () => {\n      this._console.log('ChildProcessPool.on(\\'disconnect\\', processInformation._onDisconnect = () => { ... })')\n  \n      try {\n        this.onDisconnect(processInformation)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    processInformation.process.on('error', processInformation._onError = (error) => {\n      this._console.error('ChildProcessPool.on(\\'error\\', processInformation._onError = (error) => { ... })')\n      this._console.error(error)\n  \n      try {\n        this._detachProcess(processInformation)\n        this.onError(processInformation, error)\n        this._recreateProcess(processInformation)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    processInformation.process.on('exit', processInformation._onExit = (code) => {\n      this._console.log(`ChildProcessPool.on('exit', processInformation._onExit = (${code}) => { ... })`)\n\n      try {\n\n        this._detachProcess(processInformation)\n        this.onExit(processInformation, code)\n\n        if (code > 0) {\n          this._recreateProcess(processInformation)\n        }\n\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n    processInformation.process.on('terminate', processInformation._onTerminate = (signal) => {\n      this._console.log(`ChildProcessPool.on('terminate', processInformation._onTerminate = ('${signal}') => { ... })`)\n\n      try {\n        this._detachProcess(processInformation)\n        this.onTerminate(processInformation, signal)\n        this._recreateProcess(processInformation)\n      /* c8 ignore next 3 */\n      } catch (error) {\n        this._console.error(error)\n      }\n\n    })\n\n  }\n\n  _detachProcess(processInformation) {\n    \n    let process = processInformation.process\n\n    if (processInformation._onTerminate) {\n      process.off('terminate', processInformation._onTerminate)\n      delete processInformation._onTerminate\n    }\n\n    if (processInformation._onExit) {\n      process.off('exit', processInformation._onExit)\n      delete processInformation._onExit\n    }\n\n    if (processInformation._onError) {\n      process.off('error', processInformation._onError)\n      delete processInformation._onError\n    }\n\n    if (processInformation._onDisconnect) {\n      process.off('disconnect', processInformation._onDisconnect)\n      delete processInformation._onDisconnect\n    }\n\n  }\n\n  get defaultParameter() {\n    return {}\n  }\n\n  /* c8 ignore next 3 */\n  get parameter() {\n    return this._processParameter\n  }\n\n  get defaultOption() {\n    return {\n      'maximumNumberOfCreate': 3,\n      'numberOfProcess': OS.cpus().length - 1\n    }\n  }\n\n  get option() {\n    return this._processOption\n  }\n\n  get maximumNumberOfCreate() {\n    return this._processOption.maximumNumberOfCreate\n  }\n\n  get numberOfProcess() {\n    return this._processOption.numberOfProcess\n  }\n\n  get connectedProcess() {\n    return this._process\n      .filter(({ process }) => process.isConnected)\n  }\n\n  selectProcess() {}\n\n  getProcess(index) {\n    return this._process[index]\n  }\n\n  writeTo(path, option = { 'autoClose': true, 'emitClose': true, 'encoding': 'utf8', 'flags': 'a+' }) {\n \n    let stream = null\n\n    switch (true) {\n      /* c8 ignore next 3 */\n      case path instanceof Stream.Writable:\n        stream = path\n        break\n      default:\n        stream = FileSystem.createWriteStream(path, option)\n    }\n\n    this._process.forEach(({ process }) => process.writeTo(stream, option))\n\n    this._console = new Console({\n      'colorMode': false,\n      'ignoreErrors': false,\n      'stderr': stream,\n      'stdout': stream\n    })\n\n    this._stream = stream\n    this._streamOption = option\n        \n  }\n\n  disconnect() {\n    this.connectedProcess.forEach(({ process }) => process.disconnect())\n  }\n\n  signal(signal) {\n    this.connectedProcess.forEach(({ process }) => process.signal(signal))\n  }\n\n  kill(signal = 'SIGINT') {\n    this.signal(signal)\n  }\n\n  onDisconnect(processInformation) {\n    this.emit('disconnect', processInformation)\n  }\n\n  onError(processInformation, error) {\n    this.emit('error', processInformation, error)\n  }\n\n  onExit(processInformation, code) {\n    this.emit('exit', processInformation, code)\n  }\n\n  onTerminate(processInformation, signal) {\n    this.emit('terminate', processInformation, signal)\n  }\n\n}\n\nexport { ChildProcessPool }"],"file":"child-process-pool.js"}