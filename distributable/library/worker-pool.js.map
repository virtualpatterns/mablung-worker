{"version":3,"sources":["../../source/library/worker-pool.js"],"names":["Configuration","Is","ChildProcessPool","WorkerClient","WorkerPoolModuleHandler","WorkerPoolParameter","WorkerPoolDisconnectedError","Process","process","WorkerPool","constructor","parameter","getConstructorParameter","_module","_moduleUrl","_createProcess","index","path","option","merge","env","maximumDuration","value","_getConnectedProcessInformation","forEach","workerClient","module","moduleUrl","_selectProcessInformation","ping","_getProcessInformation","processInformation","length","pingResult","Promise","allSettled","map","fulfilledPingResult","filter","result","status","reduce","minimumResult","null","cpuUsage","reason","import","url","returnValue","all","Proxy","apply","methodName","release","end","code","uncaughtException","unhandledRejection","disconnect","kill"],"mappings":"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","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport Is from '@pwn/is'\n\nimport { ChildProcessPool } from './child-process-pool.js'\nimport { WorkerClient } from './worker-client.js'\nimport { WorkerPoolModuleHandler } from './worker-pool-module-handler.js'\nimport { WorkerPoolParameter } from './worker-pool-parameter.js'\n\nimport { WorkerPoolDisconnectedError } from './error/worker-pool-disconnected-error.js'\n\nconst Process = process\n\nclass WorkerPool extends ChildProcessPool {\n\n  constructor(...parameter) {\n    super(...WorkerPoolParameter.getConstructorParameter(...parameter))\n\n    this._module = null\n    this._moduleUrl = null\n    \n  }\n\n  _createProcess(index, path, parameter, option) {\n    return new WorkerClient(path, parameter, Configuration.merge(option, { 'env': Configuration.merge(Process.env, { 'WORKER_POOL_INDEX': index }) }))\n  }\n\n  get maximumDuration() {\n    return this.option.maximumDuration\n  }\n\n  set maximumDuration(value) {\n    this.option.maximumDuration = value\n    this._getConnectedProcessInformation().forEach(({ process: workerClient }) => workerClient.maximumDuration = value)\n  }\n\n  get module() {\n    return this._module\n  }\n\n  get moduleUrl() {\n    return this._moduleUrl\n  }\n\n  async _selectProcessInformation(/* methodName, parameter */) {\n    let { index } = await this.ping()\n    return this._getProcessInformation(index)\n  }\n\n  async ping() {\n\n    let processInformation = this._getConnectedProcessInformation()\n\n    if (processInformation.length > 0) {\n\n      let pingResult = await Promise.allSettled(processInformation.map(({ process: workerClient }) => workerClient.ping()))\n\n      let fulfilledPingResult = pingResult.filter((result) => result.status === 'fulfilled')\n  \n      if (fulfilledPingResult.length > 0) {\n  \n        fulfilledPingResult = fulfilledPingResult.map((result) => result.value)\n        fulfilledPingResult = fulfilledPingResult.reduce((minimumResult, result) => Is.null(minimumResult) || result.cpuUsage < minimumResult.cpuUsage ? result : minimumResult, null)\n    \n        return fulfilledPingResult\n  \n      } else {\n        throw pingResult[0].reason\n      }\n  \n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n  \n  async import(url, option = {}) {\n\n    let processInformation = this._getConnectedProcessInformation()\n\n    if (processInformation.length > 0) {\n\n      let returnValue = await Promise.all(processInformation.map(({ process: workerClient }) => workerClient.import(url, option)))\n\n      this._module = new Proxy(this, WorkerPoolModuleHandler)\n      this._moduleUrl = url\n  \n      return returnValue\n\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  async apply(methodName, parameter) {\n    return (await this._selectProcessInformation(methodName, parameter)).process.apply(methodName, parameter)\n  }\n\n  async release(option = {}) {\n\n    let processInformation = this._getConnectedProcessInformation()\n\n    if (processInformation.length > 0) {\n\n      let returnValue = await Promise.all(processInformation.map(({ process: workerClient }) => workerClient.release(option)))\n\n      this._module = null\n      this._moduleUrl = null\n  \n      return returnValue\n\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  end(code = 0, option = {}) {\n\n    let processInformation = this._getConnectedProcessInformation()\n\n    if (processInformation.length > 0) {\n      return Promise.all(processInformation.map(({ process: workerClient }) => workerClient.end(code, option)))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  uncaughtException() {\n  \n    let processInformation = this._getConnectedProcessInformation()\n\n    if (processInformation.length > 0) {\n      return Promise.all(processInformation.map(({ process: workerClient }) => workerClient.uncaughtException()))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  unhandledRejection() {\n\n    let processInformation = this._getConnectedProcessInformation()\n\n    if (processInformation.length > 0) {\n      return Promise.all(processInformation.map(({ process: workerClient }) => workerClient.unhandledRejection()))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  disconnect() {\n\n    let processInformation = this._getConnectedProcessInformation()\n\n    if (processInformation.length > 0) {\n      return Promise.all(processInformation.map(({ process: workerClient }) => workerClient.disconnect()))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  kill(...parameter) {\n\n    let processInformation = this._getConnectedProcessInformation()\n\n    if (processInformation.length > 0) {\n      return Promise.all(processInformation.map(({ process: workerClient }) => workerClient.kill(...parameter)))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n}\n\nexport { WorkerPool }"],"file":"worker-pool.js"}