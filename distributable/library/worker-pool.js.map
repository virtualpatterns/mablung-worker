{"version":3,"sources":["../../source/library/worker-pool.js"],"names":["Configuration","Is","ChildProcessPool","WorkerClient","WorkerPoolModuleHandler","WorkerPoolParameter","WorkerPoolDisconnectedError","Process","process","WorkerPool","constructor","parameter","getConstructorParameter","_module","Proxy","_createProcess","index","path","option","merge","env","_selectProcess","ping","_getProcess","maximumDuration","value","_getConnectedProcess","forEach","workerClient","module","length","pingResult","Promise","all","map","reduce","minimumResult","result","null","cpuUsage","apply","methodName","end","code","disconnect","kill"],"mappings":"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","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport Is from '@pwn/is'\n\nimport { ChildProcessPool } from './child-process-pool.js'\nimport { WorkerClient } from './worker-client.js'\nimport { WorkerPoolModuleHandler } from './worker-pool-module-handler.js'\nimport { WorkerPoolParameter } from './worker-pool-parameter.js'\n\nimport { WorkerPoolDisconnectedError } from './error/worker-pool-disconnected-error.js'\n\nconst Process = process\n\nclass WorkerPool extends ChildProcessPool {\n\n  constructor(...parameter) {\n    super(...WorkerPoolParameter.getConstructorParameter(...parameter))\n\n    this._module = new Proxy(this, WorkerPoolModuleHandler)\n    \n  }\n\n  _createProcess(index, path, parameter, option) {\n    return new WorkerClient(path, parameter, Configuration.merge(option, { 'env': Configuration.merge(Process.env, { 'WORKER_POOL_INDEX': index }) }))\n  }\n\n  async _selectProcess(/* methodName, parameter */) {\n    let { index } = await this.ping()\n    return this._getProcess(index)\n  }\n\n  get maximumDuration() {\n    return this.option.maximumDuration\n  }\n\n  set maximumDuration(value) {\n    this.option.maximumDuration = value\n    this._getConnectedProcess().forEach((workerClient) => workerClient.maximumDuration = value)\n  }\n\n  get module() {\n    return this._module\n  }\n\n  async ping() {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n\n      let pingResult = null\n      pingResult = await Promise.all(process.map((workerClient) => workerClient.ping()))\n      pingResult = pingResult.reduce((minimumResult, result) => Is.null(minimumResult) || result.cpuUsage < minimumResult.cpuUsage ? result : minimumResult, null)\n  \n      return pingResult\n\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n  \n  // async import(url, option = {}) {\n\n  //   let process = this._getConnectedProcess()\n\n  //   if (process.length > 0) {\n\n  //     let returnValue = await Promise.all(process.map((workerClient) => workerClient.import(url, option)))\n\n  //     this._module = new Proxy(this, WorkerPoolModuleHandler)\n  //     this._moduleUrl = url\n  \n  //     return returnValue\n\n  //   } else {\n  //     throw new WorkerPoolDisconnectedError()\n  //   }\n\n  // }\n\n  async apply(methodName, parameter) {\n    return (await this._selectProcess(methodName, parameter)).apply(methodName, parameter)\n  }\n\n  // async release(option = {}) {\n\n  //   let process = this._getConnectedProcess()\n\n  //   if (process.length > 0) {\n\n  //     let returnValue = await Promise.all(process.map((workerClient) => workerClient.release(option)))\n\n  //     this._module = null\n  //     this._moduleUrl = null\n  \n  //     return returnValue\n\n  //   } else {\n  //     throw new WorkerPoolDisconnectedError()\n  //   }\n\n  // }\n\n  async end(code = 0, option = {}) {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n      return Promise.all(process.map((workerClient) => workerClient.end(code, option)))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  // uncaughtException() {\n\n  //   let process = this._getConnectedProcess()\n\n  //   if (process.length > 0) {\n  //     return Promise.all(process.map((workerClient) => workerClient.uncaughtException()))\n  //   } else {\n  //     throw new WorkerPoolDisconnectedError()\n  //   }\n\n  // }\n\n  // unhandledRejection() {\n\n  //   let process = this._getConnectedProcess()\n\n  //   if (process.length > 0) {\n  //     return Promise.all(process.map((workerClient) => workerClient.unhandledRejection()))\n  //   } else {\n  //     throw new WorkerPoolDisconnectedError()\n  //   }\n\n  // }\n\n  async disconnect() {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n      return Promise.all(process.map((workerClient) => workerClient.disconnect()))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  async kill(...parameter) {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n      return Promise.all(process.map((workerClient) => workerClient.kill(...parameter)))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n}\n\nexport { WorkerPool }"],"file":"worker-pool.js"}