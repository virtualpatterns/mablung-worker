{"version":3,"sources":["../../../source/test/library/worker-client.test.js"],"names":["Test","LoggedClient","WorkerClient","WorkerClientDurationExceededError","WorkerClientRejectedError","Process","process","Require","_createRequire","import","meta","url","test","worker","notThrowsAsync","ping","end","throwsAsync","kill","pid","resolve","is","Error","module","getPid","_getPid","skip","release","Promise","all","maximumDuration","disconnect","uncaughtException","unhandledRejection"],"mappings":"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","sourcesContent":["import Test from 'ava'\n\nimport { LoggedClient } from './logged-client.js'\nimport { WorkerClient } from '../../index.js'\n\nimport { WorkerClientDurationExceededError } from '../../index.js'\nimport { WorkerClientRejectedError } from '../../library/error/worker-client-rejected-error.js'\n\nconst Process = process\nconst Require = __require\n\nTest('new WorkerClient()', async (test) => {\n\n  let worker = new LoggedClient()\n\n  try {\n    await test.notThrowsAsync(worker.ping())\n  } finally {\n    await worker.end()\n  }\n\n})\n\nTest('WorkerClient.ping() throws WorkerClientDurationExceededError', async (test) => {\n\n  let worker = new WorkerClient({ 'maximumDuration': 1 })\n\n  try {\n    await test.throwsAsync(worker.ping(), { 'instanceOf': WorkerClientDurationExceededError })\n  } finally {\n    // we can't use worker.kill() because it'll timeout\n    Process.kill(worker.pid)\n  }\n\n})\n\nTest('WorkerClient.import(url)', async (test) => {\n\n  let worker = new WorkerClient()\n\n  try {\n   \n    let pid = await worker.import(Require.resolve('./worker.js'))\n    test.is(pid, worker.pid)\n\n    await test.throwsAsync(worker.import(Require.resolve('./worker.js')), { 'instanceOf': Error })\n    test.is(await worker.module.getPid(), worker.pid)\n\n  } finally {\n    await worker.end()\n  }\n\n})\n\nTest('WorkerClient.import(url) throws Error', async (test) => {\n\n  let worker = new WorkerClient()\n\n  try {\n\n    await worker.import(Require.resolve('./worker.js'))\n\n    await test.throwsAsync(worker.module._getPid(), { 'instanceOf': Error })\n\n  } finally {\n    await worker.end()\n  }\n\n})\n\nTest.skip('WorkerClient.release()', async (test) => {\n\n  let worker = new WorkerClient()\n\n  try {\n\n    let pid = null\n    pid = await worker.import(Require.resolve('./worker.js'))\n    pid = await worker.release()\n\n    test.is(pid, worker.pid)\n    test.is(worker.module, null)\n\n  } finally {\n    await worker.end()\n  }\n\n})\n\nTest('WorkerClient.release() throws Error', async (test) => {\n\n  let worker = new WorkerClient()\n\n  try {\n\n    await worker.import(Require.resolve('./worker.js'))\n    await worker.release()\n\n    await test.throwsAsync(worker.release(), { 'instanceOf': Error })\n\n  } finally {\n    await worker.end()\n  }\n\n})\n\nTest('WorkerClient.getPid(duration) throws WorkerClientRejectedError', async (test) => {\n\n  let worker = new WorkerClient()\n\n  await worker.import(Require.resolve('./worker.js'))\n  await test.throwsAsync(Promise.all([ worker.module.getPid(2500), worker.end() ]), { 'instanceOf': WorkerClientRejectedError })\n\n})\n\nTest('WorkerClient.whenMessageType(type) throws WorkerClientDurationExceededError', async (test) => {\n\n  let worker = new WorkerClient()\n\n  try {\n\n    await worker.import(Require.resolve('./worker.js'))\n\n    let maximumDuration = null\n    maximumDuration = worker.maximumDuration\n\n    worker.maximumDuration = 2000\n    await test.throwsAsync(worker.module.getPid(2500), { 'instanceOf': WorkerClientDurationExceededError })\n    worker.maximumDuration = maximumDuration\n\n  } finally {\n    await worker.end()\n  }\n\n})\n\nTest('WorkerClient.whenRejected() throws WorkerClientDurationExceededError', async (test) => {\n\n  let worker = new WorkerClient()\n\n  await worker.ping() // establish is ready before call to end\n\n  let maximumDuration = null\n  maximumDuration = worker.maximumDuration\n\n  worker.maximumDuration = 1\n  await test.throwsAsync(worker.end(), { 'instanceOf': WorkerClientDurationExceededError })\n  worker.maximumDuration = maximumDuration\n\n})\n\nTest('WorkerClient.disconnect()', async (test) => {\n\n  let worker = new WorkerClient()\n\n  await test.notThrowsAsync(worker.ping()) // establishes is ready\n  await worker.disconnect()\n  await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n})\n\nTest('WorkerClient.end()', async (test) => {\n\n  let worker = new WorkerClient() // LoggedClient() // \n\n  // this import is required because it contains the onEnd method\n  await worker.import(Require.resolve('./worker.js'))\n\n  await worker.end({ 'pid': worker.pid }) // also establishes is ready\n  await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n})\n\nTest('WorkerClient.kill()', async (test) => {\n\n  let worker = new WorkerClient()\n\n  await test.notThrowsAsync(worker.ping()) // establishes is ready\n  await worker.kill()\n  await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n})\n\nTest('WorkerClient.uncaughtException()', async (test) => {\n\n  let worker = new WorkerClient()\n\n  await worker.uncaughtException() // also establishes is ready\n  await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n})\n \nTest('WorkerClient.unhandledRejection()', async (test) => {\n\n  // this test requires that unhandled promises exit the node process\n  // this is enabled by the --unhandled-rejections=strict argument\n\n  let worker = new WorkerClient()\n\n  await worker.unhandledRejection() // also establishes is ready\n  await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n})\n"],"file":"worker-client.test.js"}