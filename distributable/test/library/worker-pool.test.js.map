{"version":3,"sources":["../../../source/test/library/worker-pool.test.js"],"names":["Sinon","Test","LoggedPool","WorkerPool","WorkerPoolDisconnectedError","Require","_createRequire","import","meta","url","test","pool","notThrows","notThrowsAsync","end","longMaximumDuration","is","maximumDuration","shortMaximumDuration","sandbox","createSandbox","resolve","spy","module","getPid","true","_selectProcess","calledOnce","restore","ping","throwsAsync","Promise","setTimeout","throwUncaughtException","rejectUnhandledException","disconnect","kill"],"mappings":"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","sourcesContent":["import Sinon from 'sinon'\nimport Test from 'ava'\n\nimport { LoggedPool } from './logged-pool.js'\nimport { WorkerPool } from '../../index.js'\n\nimport { WorkerPoolDisconnectedError } from '../../index.js'\n\nconst Require = __require\n\nTest('new WorkerPool()', async (test) => {\n\n  let pool = null\n  \n  test.notThrows(() => { pool = new WorkerPool()})\n  await test.notThrowsAsync(pool.end())\n\n})\n\nTest('new WorkerPool({ \\'maximumDuration\\': N })', async (test) => {\n\n  let longMaximumDuration = 5000\n  let pool = new WorkerPool({ 'maximumDuration': longMaximumDuration})\n\n  try {\n    test.is(pool.maximumDuration, longMaximumDuration)\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.maximumDuration', async (test) => {\n\n  let shortMaximumDuration = 1000\n  let longMaximumDuration = 5000\n\n  let pool = new WorkerPool()\n\n  try {\n\n    pool.maximumDuration = shortMaximumDuration\n    test.is(pool.maximumDuration, shortMaximumDuration)\n    pool.maximumDuration = longMaximumDuration\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool._selectProcess(methodName, parameter)', async (test) => {\n\n  const sandbox = Sinon.createSandbox()\n\n  try {\n\n    let pool = new WorkerPool(Require.resolve('./worker.js'))\n\n    try {\n      sandbox.spy(pool, '_selectProcess')\n      await pool.module.getPid()\n      test.true(pool._selectProcess.calledOnce)\n    } finally {\n      await pool.end()\n    }\n  \n  } finally {\n    sandbox.restore()\n  }\n\n})\n\nTest('WorkerPool.ping()', async (test) => {\n\n  let pool = new WorkerPool()\n\n  try {\n    // does not show the code as executed :-(\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.ping() throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n\n  await pool.end()\n  await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.end(option)', async (test) => {\n  await test.notThrowsAsync((new WorkerPool()).end())\n})\n\nTest('WorkerPool.end(option) throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n\n  await pool.end()\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.end(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.module.throwUncaughtException()', async (test) => {\n\n  let pool = new WorkerPool(Require.resolve('./worker.js'), { 'numberOfProcess': 1 })\n\n  try {\n    await test.notThrowsAsync(pool.module.throwUncaughtException()) // the pool should recreate exited processes\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.module.rejectUnhandledException()', async (test) => {\n\n  // this test requires that the node process exit when a Promise rejection is unhandled\n  // as established by the --unhandled-rejections=strict parameter to node\n\n  let pool = new WorkerPool(Require.resolve('./worker.js'), { 'numberOfProcess': 1 })\n\n  try {\n    await test.notThrowsAsync(pool.module.rejectUnhandledException()) // the pool should recreate exited processes\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.disconnect()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n\n  await test.notThrowsAsync(pool.disconnect()) // disconnect causes a normal code = 0 exit, the pool will not recreate exited processes\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.disconnect() throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n\n  await test.notThrowsAsync(pool.disconnect()) // disconnect causes a normal code = 0 exit, the pool will not recreate exited processes\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.disconnect(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest('WorkerPool.kill()', async (test) => {\n\n  // use LoggedPool so that the if condition of _recreateProcess regarding the stream is called\n\n  let pool = new LoggedPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n\n  try {\n\n    await test.notThrowsAsync(pool.kill()) // the pool should recreate killed processes\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    await test.notThrowsAsync(pool.ping())\n  \n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.kill() throws WorkerPoolDisconnectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 1 })\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n\n  await test.notThrowsAsync(pool.disconnect()) // disconnect causes a normal code = 0 exit, the pool will not recreate exited processes\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  await test.throwsAsync(pool.kill(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\n// Test.skip('WorkerPool.uncaughtException()', async (test) => {\n\n//   let pool = new WorkerPool()\n\n//   try {\n\n//     await pool.uncaughtException()\n//     await test.notThrowsAsync(pool.ping()) // the pool should recreate exited processes\n  \n//   } finally {\n//     await pool.end()\n//   }\n\n// })\n \n// Test.skip('WorkerPool.unhandledRejection()', async (test) => {\n\n//   // this test requires that unhandled promises exit the node process\n//   // this is enabled by the --unhandled-rejections=strict argument\n\n//   let pool = new LoggedPool()\n\n//   try {\n\n//     await pool.unhandledRejection()\n//     await test.notThrowsAsync(pool.ping()) // the pool should recreate exited processes\n  \n//   } finally {\n//     await pool.end()\n//   }\n\n// })\n\n// Test.skip('new WorkerPool({ \\'numberOfProcess\\': 2 })', async (test) => {\n\n//   let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   try {\n//     test.is(pool._getConnectedProcessInformation().length, 2)\n//   } finally {\n//     await pool.end()\n//   }\n\n// })\n\n// Test.skip('WorkerPool.whenMessageType(type) throws WorkerClientDurationExceededError', async (test) => {\n\n//   let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   try {\n\n//     await pool.import(Require.resolve('./worker.js'))\n\n//     let maximumDuration = null\n//     maximumDuration = pool.maximumDuration\n\n//     pool.maximumDuration = 2000\n//     await test.throwsAsync(pool.module.getPid(2500), { 'instanceOf': WorkerClientDurationExceededError })\n//     pool.maximumDuration = maximumDuration\n\n//   } finally {\n//     await pool.end()\n//   }\n\n// })\n\n// Test.skip('WorkerPool.ping() throws WorkerClientDurationExceededError', async (test) => {\n\n//   let pool = new WorkerPool({ 'maximumDuration': 1, 'numberOfProcess': 2 })\n\n//   try {\n//     await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerClientDurationExceededError })\n//   } finally {\n//     // we can't use pool.kill() because it'll timeout\n//     pool._getConnectedProcessInformation().forEach(({ process: worker }) => Process.kill(worker.pid)) \n//   }\n\n// })\n\n// Test.skip('WorkerPool.import(url)', async (test) => {\n\n//   let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   try {\n   \n//     let allPid = await pool.import(Require.resolve('./worker.js'))\n//     let onePid = await pool.module.getPid()\n\n//     test.assert(allPid.includes(onePid))\n//     await test.throwsAsync(pool.import(Require.resolve('./worker.js')), { 'instanceOf': Error })\n\n//   } finally {\n//     await pool.end()\n//   }\n\n// })\n\n// Test.skip('WorkerPool.import(url) throws Error', async (test) => {\n\n//   let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   try {\n\n//     await pool.import(Require.resolve('./worker.js'))\n\n//     await test.throwsAsync(pool.module._getPid(), { 'instanceOf': Error })\n\n//   } finally {\n//     await pool.end()\n//   }\n\n// })\n\n// Test.skip('WorkerPool.release()', async (test) => {\n\n//   let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   try {\n\n//     let allPid = await pool.import(Require.resolve('./worker.js'))\n//     let onePid = await pool.module.getPid()\n\n//     allPid = await pool.release()\n\n//     test.assert(allPid.includes(onePid))\n//     test.is(pool.module, null)\n\n//   } finally {\n//     await pool.end()\n//   }\n\n// })\n\n// Test.skip('WorkerPool.release() throws Error', async (test) => {\n\n//   let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   try {\n\n//     await pool.import(Require.resolve('./worker.js'))\n//     await pool.release()\n\n//     await test.throwsAsync(pool.release(), { 'instanceOf': Error })\n\n//   } finally {\n//     await pool.end()\n//   }\n\n// })\n\n// Test.skip('WorkerPool.getPid(duration) throws WorkerClientRejectedError', async (test) => {\n\n//   let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   await pool.import(Require.resolve('./worker.js'))\n//   await test.throwsAsync(Promise.all([ pool.module.getPid(2500), pool.end() ]), { 'instanceOf': WorkerClientRejectedError })\n\n// })\n\n// Test.skip('WorkerPool.whenRejected() throws WorkerClientDurationExceededError', async (test) => {\n\n//   let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   await pool.ping() // establish is ready before call to end\n\n//   let maximumDuration = null\n//   maximumDuration = pool.maximumDuration\n\n//   pool.maximumDuration = 1\n//   await test.throwsAsync(pool.end(), { 'instanceOf': WorkerClientDurationExceededError })\n//   pool.maximumDuration = maximumDuration\n\n// })\n\n// Test.skip('WorkerPool.end()', async (test) => {\n\n//   let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   // this import is required because it contains the onEnd method\n//   await pool.import(Require.resolve('./worker.js'))\n\n//   await pool.end({ 'pid': 10000 }) // also establishes is ready\n//   await test.throwsAsync(pool.ping()) // , { 'instanceOf': WorkerPoolDisconnectedError })\n\n// })\n\n// Test.skip('WorkerPool.kill() when maximumNumberOfCreate is 0', async (test) => {\n\n//   let pool = new WorkerPool({ 'maximumNumberOfCreate': 0, 'numberOfProcess': 2 })\n\n//   await test.notThrowsAsync(pool.ping()) // establishes is ready\n//   await pool.kill()\n//   await test.throwsAsync(pool.ping()) // the pool will not recreate killed processes\n\n// })\n\n"],"file":"worker-pool.test.js"}