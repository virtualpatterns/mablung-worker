{"version":3,"sources":["../../../source/test/library/worker-pool.test.js"],"names":["Test","LoggedPool","WorkerPool","WorkerClientDurationExceededError","WorkerClientRejectedError","Process","process","Require","_createRequire","import","meta","url","test","worker","notThrowsAsync","ping","end"],"mappings":"yDAAA,OAAOA,IAAP,MAAiB,KAAjB;;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,gBAA3B;;AAEA,SAASC,iCAAT,QAAkD,gBAAlD;AACA,SAASC,yBAAT,QAA0C,qDAA1C;;AAEA,MAAMC,OAAO,GAAGC,OAAhB;AACA,MAAMC,OAAO,GATbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CASd;;AAEAX,IAAI,CAAC,kBAAD,EAAqB,MAAOY,IAAP,IAAgB;;AAEvC,MAAIC,MAAM,GAAG,IAAIZ,UAAJ,EAAb;;AAEA,MAAI;AACF,UAAMW,IAAI,CAACE,cAAL,CAAoBD,MAAM,CAACE,IAAP,EAApB,CAAN;AACD,GAFD,SAEU;AACR,UAAMF,MAAM,CAACG,GAAP,EAAN;AACD;;AAEF,CAVG,CAAJ;;AAYA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA","sourcesContent":["import Test from 'ava'\n\nimport { LoggedPool } from './logged-pool.js'\nimport { WorkerPool } from '../../index.js'\n\nimport { WorkerClientDurationExceededError } from '../../index.js'\nimport { WorkerClientRejectedError } from '../../library/error/worker-client-rejected-error.js'\n\nconst Process = process\nconst Require = __require\n\nTest('new WorkerPool()', async (test) => {\n\n  let worker = new LoggedPool()\n\n  try {\n    await test.notThrowsAsync(worker.ping())\n  } finally {\n    await worker.end()\n  }\n\n})\n\n// Test('WorkerPool.ping() throws WorkerClientDurationExceededError', async (test) => {\n\n//   let worker = new WorkerPool({ 'maximumDuration': 1 })\n\n//   try {\n//     await test.throwsAsync(worker.ping(), { 'instanceOf': WorkerClientDurationExceededError })\n//   } finally {\n//     // we can't use worker.kill() because it'll timeout\n//     Process.kill(worker.pid)\n//   }\n\n// })\n\n// Test('WorkerPool.import(url)', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   try {\n   \n//     let pid = await worker.import(Require.resolve('./worker.js'))\n//     test.is(pid, worker.pid)\n\n//     await test.throwsAsync(worker.import(Require.resolve('./worker.js')), { 'instanceOf': Error })\n//     test.is(await worker.module.getPid(), worker.pid)\n\n//   } finally {\n//     await worker.end()\n//   }\n\n// })\n\n// Test('WorkerPool.import(url) throws Error', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   try {\n\n//     await worker.import(Require.resolve('./worker.js'))\n\n//     await test.throwsAsync(worker.module._getPid(), { 'instanceOf': Error })\n\n//   } finally {\n//     await worker.end()\n//   }\n\n// })\n\n// Test('WorkerPool.release()', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   try {\n\n//     let pid = null\n//     pid = await worker.import(Require.resolve('./worker.js'))\n//     pid = await worker.release()\n\n//     test.is(pid, worker.pid)\n//     await test.throws(() => { worker.module.getPid() }, { 'instanceOf': TypeError })\n\n//   } finally {\n//     await worker.end()\n//   }\n\n// })\n\n// Test('WorkerPool.release() throws Error', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   try {\n\n//     await worker.import(Require.resolve('./worker.js'))\n//     await worker.release()\n\n//     await test.throwsAsync(worker.release(), { 'instanceOf': Error })\n\n//   } finally {\n//     await worker.end()\n//   }\n\n// })\n\n// Test('WorkerPool.getPid(duration) throws WorkerClientRejectedError', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   await worker.import(Require.resolve('./worker.js'))\n//   await test.throwsAsync(Promise.all([ worker.module.getPid(2500), worker.end() ]), { 'instanceOf': WorkerClientRejectedError })\n\n// })\n\n// Test('WorkerPool.whenMessageType(type) throws WorkerClientDurationExceededError', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   try {\n\n//     await worker.import(Require.resolve('./worker.js'))\n\n//     let maximumDuration = null\n//     maximumDuration = worker.maximumDuration\n\n//     worker.maximumDuration = 2000\n//     await test.throwsAsync(worker.module.getPid(2500), { 'instanceOf': WorkerClientDurationExceededError })\n//     worker.maximumDuration = maximumDuration\n\n//   } finally {\n//     await worker.end()\n//   }\n\n// })\n\n// Test('WorkerPool.whenRejected() throws WorkerClientDurationExceededError', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   await worker.ping() // establish is ready before call to end\n\n//   let maximumDuration = null\n//   maximumDuration = worker.maximumDuration\n\n//   worker.maximumDuration = 1\n//   await test.throwsAsync(worker.end(), { 'instanceOf': WorkerClientDurationExceededError })\n//   worker.maximumDuration = maximumDuration\n\n// })\n\n// Test('WorkerPool.disconnect()', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   await test.notThrowsAsync(worker.ping()) // establishes is ready\n//   await worker.disconnect()\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n\n// Test('WorkerPool.end()', async (test) => {\n\n//   let worker = new WorkerPool() // LoggedClient() // \n\n//   // this import is required because it contains the onEnd method\n//   await worker.import(Require.resolve('./worker.js'))\n\n//   await worker.end({ 'pid': worker.pid }) // also establishes is ready\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n\n// Test('WorkerPool.kill()', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   await test.notThrowsAsync(worker.ping()) // establishes is ready\n//   await worker.kill()\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n\n// Test('WorkerPool.uncaughtException()', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   await worker.uncaughtException() // also establishes is ready\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n \n// Test('WorkerPool.unhandledRejection()', async (test) => {\n\n//   // this test requires that unhandled promises exit the node process\n//   // this is enabled by the --unhandled-rejections=strict argument\n\n//   let worker = new WorkerPool()\n\n//   await worker.unhandledRejection() // also establishes is ready\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n"],"file":"worker-pool.test.js"}