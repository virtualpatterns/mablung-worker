{"version":3,"sources":["../../../source/test/library/worker-pool.test.js"],"names":["Test","LoggedPool","WorkerPool","WorkerClientDurationExceededError","WorkerPoolDisconnectedError","WorkerClientRejectedError","Process","process","Require","_createRequire","import","meta","url","test","pool","notThrowsAsync","ping","end","only","throwsAsync","getConnectedProcessInformation","forEach","worker","kill","pid","allPid","resolve","onePid","module","getPid","assert","includes","Error","_getPid","release","is","Promise","all","maximumDuration","disconnect"],"mappings":"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","sourcesContent":["import Test from 'ava'\n\nimport { LoggedPool } from './logged-pool.js'\nimport { WorkerPool } from '../../index.js'\n\nimport { WorkerClientDurationExceededError, WorkerPoolDisconnectedError } from '../../index.js'\nimport { WorkerClientRejectedError } from '../../library/error/worker-client-rejected-error.js'\n\nconst Process = process\nconst Require = __require\n\nTest('new WorkerPool()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.only('WorkerPool.ping() throws WorkerClientDurationExceededError', async (test) => {\n\n  let pool = new WorkerPool({ 'maximumDuration': 1, 'numberOfProcess': 2 })\n\n  try {\n    await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerClientDurationExceededError })\n  } finally {\n    // we can't use pool.kill() because it'll timeout\n    pool.getConnectedProcessInformation().forEach(({ process: worker }) => Process.kill(worker.pid)) \n  }\n\n})\n\nTest('WorkerPool.import(url)', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n   \n    let allPid = await pool.import(Require.resolve('./worker.js'))\n    let onePid = await pool.module.getPid()\n\n    test.assert(allPid.includes(onePid))\n    await test.throwsAsync(pool.import(Require.resolve('./worker.js')), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.import(url) throws Error', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.import(Require.resolve('./worker.js'))\n\n    await test.throwsAsync(pool.module._getPid(), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.release()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    let allPid = await pool.import(Require.resolve('./worker.js'))\n    let onePid = await pool.module.getPid()\n\n    allPid = await pool.release()\n\n    test.assert(allPid.includes(onePid))\n    test.is(pool.module, null)\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.release() throws Error', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.import(Require.resolve('./worker.js'))\n    await pool.release()\n\n    await test.throwsAsync(pool.release(), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.getPid(duration) throws WorkerClientRejectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  await pool.import(Require.resolve('./worker.js'))\n  await test.throwsAsync(Promise.all([ pool.module.getPid(2500), pool.end() ]), { 'instanceOf': WorkerClientRejectedError })\n\n})\n\nTest('WorkerPool.whenMessageType(type) throws WorkerClientDurationExceededError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.import(Require.resolve('./worker.js'))\n\n    let maximumDuration = null\n    maximumDuration = pool.maximumDuration\n\n    pool.maximumDuration = 2000\n    await test.throwsAsync(pool.module.getPid(2500), { 'instanceOf': WorkerClientDurationExceededError })\n    pool.maximumDuration = maximumDuration\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.whenRejected() throws WorkerClientDurationExceededError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  await pool.ping() // establish is ready before call to end\n\n  let maximumDuration = null\n  maximumDuration = pool.maximumDuration\n\n  pool.maximumDuration = 1\n  await test.throwsAsync(pool.end(), { 'instanceOf': WorkerClientDurationExceededError })\n  pool.maximumDuration = maximumDuration\n\n})\n\nTest('WorkerPool.disconnect()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  await test.notThrowsAsync(pool.ping()) // establishes is ready\n  await pool.disconnect()\n  await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\n// Test('WorkerPool.end()', async (test) => {\n\n//   let worker = new WorkerPool({ 'numberOfProcess': 2 }) // LoggedClient() // \n\n//   // this import is required because it contains the onEnd method\n//   await worker.import(Require.resolve('./worker.js'))\n\n//   await worker.end({ 'pid': worker.pid }) // also establishes is ready\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n\n// Test('WorkerPool.kill()', async (test) => {\n\n//   let worker = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   await test.notThrowsAsync(worker.ping()) // establishes is ready\n//   await worker.kill()\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n\n// Test('WorkerPool.uncaughtException()', async (test) => {\n\n//   let worker = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   await worker.uncaughtException() // also establishes is ready\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n \n// Test('WorkerPool.unhandledRejection()', async (test) => {\n\n//   // this test requires that unhandled promises exit the node process\n//   // this is enabled by the --unhandled-rejections=strict argument\n\n//   let worker = new WorkerPool({ 'numberOfProcess': 2 })\n\n//   await worker.unhandledRejection() // also establishes is ready\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n"],"file":"worker-pool.test.js"}