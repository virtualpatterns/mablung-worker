{"version":3,"sources":["../../../source/test/library/worker-pool.test.js"],"names":["Test","LoggedPool","WorkerPool","WorkerClientDurationExceededError","WorkerClientRejectedError","Process","process","Require","_createRequire","import","meta","url","test","pool","notThrowsAsync","ping","end","throwsAsync","connectedProcess","forEach","worker","kill","pid","allPid","resolve","onePid","module","getPid","assert","includes","Error","only","_getPid"],"mappings":"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","sourcesContent":["import Test from 'ava'\n\nimport { LoggedPool } from './logged-pool.js'\nimport { WorkerPool } from '../../index.js'\n\nimport { WorkerClientDurationExceededError } from '../../index.js'\nimport { WorkerClientRejectedError } from '../../library/error/worker-client-rejected-error.js'\n\nconst Process = process\nconst Require = __require\n\nTest('new WorkerPool()', async (test) => {\n\n  let pool = new WorkerPool()\n\n  try {\n    await test.notThrowsAsync(pool.ping())\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.ping() throws WorkerClientDurationExceededError', async (test) => {\n\n  let pool = new WorkerPool()\n\n  try {\n    await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerClientDurationExceededError })\n  } finally {\n    // we can't use pool.kill() because it'll timeout\n    pool.connectedProcess.forEach(({ process: worker }) => Process.kill(worker.pid)) \n  }\n\n})\n\nTest('WorkerPool.import(url)', async (test) => {\n\n  let pool = new WorkerPool()\n\n  try {\n   \n    let allPid = await pool.import(Require.resolve('./worker.js'))\n    let onePid = await pool.module.getPid()\n\n    test.assert(allPid.includes(onePid))\n    await test.throwsAsync(pool.import(Require.resolve('./worker.js')), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.only('WorkerPool.import(url) throws Error', async (test) => {\n\n  let pool = new WorkerPool()\n\n  try {\n\n    await pool.import(Require.resolve('./worker.js'))\n    \n    await test.throwsAsync(pool.module._getPid(), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\n// Test('WorkerPool.release()', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   try {\n\n//     let pid = null\n//     pid = await worker.import(Require.resolve('./worker.js'))\n//     pid = await worker.release()\n\n//     test.is(pid, worker.pid)\n//     await test.throws(() => { worker.module.getPid() }, { 'instanceOf': TypeError })\n\n//   } finally {\n//     await worker.end()\n//   }\n\n// })\n\n// Test('WorkerPool.release() throws Error', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   try {\n\n//     await worker.import(Require.resolve('./worker.js'))\n//     await worker.release()\n\n//     await test.throwsAsync(worker.release(), { 'instanceOf': Error })\n\n//   } finally {\n//     await worker.end()\n//   }\n\n// })\n\n// Test('WorkerPool.getPid(duration) throws WorkerClientRejectedError', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   await worker.import(Require.resolve('./worker.js'))\n//   await test.throwsAsync(Promise.all([ worker.module.getPid(2500), worker.end() ]), { 'instanceOf': WorkerClientRejectedError })\n\n// })\n\n// Test('WorkerPool.whenMessageType(type) throws WorkerClientDurationExceededError', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   try {\n\n//     await worker.import(Require.resolve('./worker.js'))\n\n//     let maximumDuration = null\n//     maximumDuration = worker.maximumDuration\n\n//     worker.maximumDuration = 2000\n//     await test.throwsAsync(worker.module.getPid(2500), { 'instanceOf': WorkerClientDurationExceededError })\n//     worker.maximumDuration = maximumDuration\n\n//   } finally {\n//     await worker.end()\n//   }\n\n// })\n\n// Test('WorkerPool.whenRejected() throws WorkerClientDurationExceededError', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   await worker.ping() // establish is ready before call to end\n\n//   let maximumDuration = null\n//   maximumDuration = worker.maximumDuration\n\n//   worker.maximumDuration = 1\n//   await test.throwsAsync(worker.end(), { 'instanceOf': WorkerClientDurationExceededError })\n//   worker.maximumDuration = maximumDuration\n\n// })\n\n// Test('WorkerPool.disconnect()', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   await test.notThrowsAsync(worker.ping()) // establishes is ready\n//   await worker.disconnect()\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n\n// Test('WorkerPool.end()', async (test) => {\n\n//   let worker = new WorkerPool() // LoggedClient() // \n\n//   // this import is required because it contains the onEnd method\n//   await worker.import(Require.resolve('./worker.js'))\n\n//   await worker.end({ 'pid': worker.pid }) // also establishes is ready\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n\n// Test('WorkerPool.kill()', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   await test.notThrowsAsync(worker.ping()) // establishes is ready\n//   await worker.kill()\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n\n// Test('WorkerPool.uncaughtException()', async (test) => {\n\n//   let worker = new WorkerPool()\n\n//   await worker.uncaughtException() // also establishes is ready\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n \n// Test('WorkerPool.unhandledRejection()', async (test) => {\n\n//   // this test requires that unhandled promises exit the node process\n//   // this is enabled by the --unhandled-rejections=strict argument\n\n//   let worker = new WorkerPool()\n\n//   await worker.unhandledRejection() // also establishes is ready\n//   await test.throwsAsync(worker.ping(), { 'code': 'ERR_IPC_CHANNEL_CLOSED' })\n\n// })\n"],"file":"worker-pool.test.js"}