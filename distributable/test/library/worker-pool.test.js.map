{"version":3,"sources":["../../../source/test/library/worker-pool.test.js"],"names":["Test","LoggedPool","WorkerPool","WorkerClientDurationExceededError","WorkerPoolDisconnectedError","WorkerClientRejectedError","Process","process","Require","_createRequire","import","meta","url","test","pool","notThrows","notThrowsAsync","end","longMaximumDuration","is","maximumDuration","shortMaximumDuration","module","resolve","not","skip","getConnectedProcessInformation","length","throwsAsync","getPid","ping","forEach","worker","kill","pid","allPid","onePid","assert","includes","Error","_getPid","release","Promise","all","disconnect","uncaughtException","unhandledRejection"],"mappings":"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","sourcesContent":["import Test from 'ava'\n\nimport { LoggedPool } from './logged-pool.js'\nimport { WorkerPool } from '../../index.js'\n\nimport { WorkerClientDurationExceededError, WorkerPoolDisconnectedError } from '../../index.js'\nimport { WorkerClientRejectedError } from '../../library/error/worker-client-rejected-error.js'\n\nconst Process = process\nconst Require = __require\n\nTest('new WorkerPool()', async (test) => {\n\n  let pool = null\n  \n  test.notThrows(() => { pool = new WorkerPool()})\n  await test.notThrowsAsync(pool.end())\n\n})\n\nTest('new WorkerPool({ \\'maximumDuration\\': N })', async (test) => {\n\n  let longMaximumDuration = 5000\n  let pool = new WorkerPool({ 'maximumDuration': longMaximumDuration})\n\n  try {\n    test.is(pool.maximumDuration, longMaximumDuration)\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.maximumDuration', async (test) => {\n\n  let shortMaximumDuration = 1000\n  let longMaximumDuration = 5000\n\n  let pool = new WorkerPool()\n\n  try {\n\n    pool.maximumDuration = shortMaximumDuration\n    test.is(pool.maximumDuration, shortMaximumDuration)\n    pool.maximumDuration = longMaximumDuration\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest('WorkerPool.module', async (test) => {\n\n  let pool = new WorkerPool()\n\n  try {\n\n    // before import\n    test.is(pool.module, null)\n\n    await pool.import(Require.resolve('./worker.js'))\n\n    // after import\n    test.not(pool.module, null)\n    \n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('new WorkerPool({ \\'numberOfProcess\\': 2 })', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n    test.is(pool.getConnectedProcessInformation().length, 2)\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.whenMessageType(type) throws WorkerClientDurationExceededError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.import(Require.resolve('./worker.js'))\n\n    let maximumDuration = null\n    maximumDuration = pool.maximumDuration\n\n    pool.maximumDuration = 2000\n    await test.throwsAsync(pool.module.getPid(2500), { 'instanceOf': WorkerClientDurationExceededError })\n    pool.maximumDuration = maximumDuration\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.ping() throws WorkerClientDurationExceededError', async (test) => {\n\n  let pool = new WorkerPool({ 'maximumDuration': 1, 'numberOfProcess': 2 })\n\n  try {\n    await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerClientDurationExceededError })\n  } finally {\n    // we can't use pool.kill() because it'll timeout\n    pool.getConnectedProcessInformation().forEach(({ process: worker }) => Process.kill(worker.pid)) \n  }\n\n})\n\nTest.skip('WorkerPool.import(url)', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n   \n    let allPid = await pool.import(Require.resolve('./worker.js'))\n    let onePid = await pool.module.getPid()\n\n    test.assert(allPid.includes(onePid))\n    await test.throwsAsync(pool.import(Require.resolve('./worker.js')), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.import(url) throws Error', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.import(Require.resolve('./worker.js'))\n\n    await test.throwsAsync(pool.module._getPid(), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.release()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    let allPid = await pool.import(Require.resolve('./worker.js'))\n    let onePid = await pool.module.getPid()\n\n    allPid = await pool.release()\n\n    test.assert(allPid.includes(onePid))\n    test.is(pool.module, null)\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.release() throws Error', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.import(Require.resolve('./worker.js'))\n    await pool.release()\n\n    await test.throwsAsync(pool.release(), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.getPid(duration) throws WorkerClientRejectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  await pool.import(Require.resolve('./worker.js'))\n  await test.throwsAsync(Promise.all([ pool.module.getPid(2500), pool.end() ]), { 'instanceOf': WorkerClientRejectedError })\n\n})\n\nTest.skip('WorkerPool.whenRejected() throws WorkerClientDurationExceededError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  await pool.ping() // establish is ready before call to end\n\n  let maximumDuration = null\n  maximumDuration = pool.maximumDuration\n\n  pool.maximumDuration = 1\n  await test.throwsAsync(pool.end(), { 'instanceOf': WorkerClientDurationExceededError })\n  pool.maximumDuration = maximumDuration\n\n})\n\nTest.skip('WorkerPool.disconnect()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  await test.notThrowsAsync(pool.ping()) // establishes is ready\n  await pool.disconnect()\n  await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest.skip('WorkerPool.end()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  // this import is required because it contains the onEnd method\n  await pool.import(Require.resolve('./worker.js'))\n\n  await pool.end({ 'pid': 10000 }) // also establishes is ready\n  await test.throwsAsync(pool.ping()) // , { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest.skip('WorkerPool.kill()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await test.notThrowsAsync(pool.ping()) // establishes is ready\n    await pool.kill()\n    await test.notThrowsAsync(pool.ping()) // the pool should recreate killed processes\n  \n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.uncaughtException()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.uncaughtException()\n    await test.notThrowsAsync(pool.ping()) // the pool should recreate exited processes\n  \n  } finally {\n    await pool.end()\n  }\n\n})\n \nTest.skip('WorkerPool.unhandledRejection()', async (test) => {\n\n  // this test requires that unhandled promises exit the node process\n  // this is enabled by the --unhandled-rejections=strict argument\n\n  let pool = new LoggedPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.unhandledRejection()\n    await test.notThrowsAsync(pool.ping()) // the pool should recreate exited processes\n  \n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.kill() when maximumNumberOfCreate is 0', async (test) => {\n\n  let pool = new WorkerPool({ 'maximumNumberOfCreate': 0, 'numberOfProcess': 2 })\n\n  await test.notThrowsAsync(pool.ping()) // establishes is ready\n  await pool.kill()\n  await test.throwsAsync(pool.ping()) // the pool will not recreate killed processes\n\n})\n\n"],"file":"worker-pool.test.js"}