{"version":3,"sources":["../../../source/test/library/worker-pool.test.js"],"names":["Test","LoggedPool","WorkerPool","WorkerClientDurationExceededError","WorkerPoolDisconnectedError","WorkerClientRejectedError","Process","process","Require","_createRequire","import","meta","url","test","pool","pass","end","skip","resolve","maximumDuration","throwsAsync","module","getPid","ping","getConnectedProcessInformation","forEach","worker","kill","pid","allPid","onePid","assert","includes","Error","_getPid","release","is","Promise","all","notThrowsAsync","disconnect","uncaughtException","unhandledRejection"],"mappings":"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","sourcesContent":["import Test from 'ava'\n\nimport { LoggedPool } from './logged-pool.js'\nimport { WorkerPool } from '../../index.js'\n\nimport { WorkerClientDurationExceededError, WorkerPoolDisconnectedError } from '../../index.js'\nimport { WorkerClientRejectedError } from '../../library/error/worker-client-rejected-error.js'\n\nconst Process = process\nconst Require = __require\n\nTest('new WorkerPool()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n    test.pass()\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.whenMessageType(type) throws WorkerClientDurationExceededError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.import(Require.resolve('./worker.js'))\n\n    let maximumDuration = null\n    maximumDuration = pool.maximumDuration\n\n    pool.maximumDuration = 2000\n    await test.throwsAsync(pool.module.getPid(2500), { 'instanceOf': WorkerClientDurationExceededError })\n    pool.maximumDuration = maximumDuration\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.ping() throws WorkerClientDurationExceededError', async (test) => {\n\n  let pool = new WorkerPool({ 'maximumDuration': 1, 'numberOfProcess': 2 })\n\n  try {\n    await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerClientDurationExceededError })\n  } finally {\n    // we can't use pool.kill() because it'll timeout\n    pool.getConnectedProcessInformation().forEach(({ process: worker }) => Process.kill(worker.pid)) \n  }\n\n})\n\nTest.skip('WorkerPool.import(url)', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n   \n    let allPid = await pool.import(Require.resolve('./worker.js'))\n    let onePid = await pool.module.getPid()\n\n    test.assert(allPid.includes(onePid))\n    await test.throwsAsync(pool.import(Require.resolve('./worker.js')), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.import(url) throws Error', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.import(Require.resolve('./worker.js'))\n\n    await test.throwsAsync(pool.module._getPid(), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.release()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    let allPid = await pool.import(Require.resolve('./worker.js'))\n    let onePid = await pool.module.getPid()\n\n    allPid = await pool.release()\n\n    test.assert(allPid.includes(onePid))\n    test.is(pool.module, null)\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.release() throws Error', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.import(Require.resolve('./worker.js'))\n    await pool.release()\n\n    await test.throwsAsync(pool.release(), { 'instanceOf': Error })\n\n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.getPid(duration) throws WorkerClientRejectedError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  await pool.import(Require.resolve('./worker.js'))\n  await test.throwsAsync(Promise.all([ pool.module.getPid(2500), pool.end() ]), { 'instanceOf': WorkerClientRejectedError })\n\n})\n\nTest.skip('WorkerPool.whenRejected() throws WorkerClientDurationExceededError', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  await pool.ping() // establish is ready before call to end\n\n  let maximumDuration = null\n  maximumDuration = pool.maximumDuration\n\n  pool.maximumDuration = 1\n  await test.throwsAsync(pool.end(), { 'instanceOf': WorkerClientDurationExceededError })\n  pool.maximumDuration = maximumDuration\n\n})\n\nTest.skip('WorkerPool.disconnect()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  await test.notThrowsAsync(pool.ping()) // establishes is ready\n  await pool.disconnect()\n  await test.throwsAsync(pool.ping(), { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest.skip('WorkerPool.end()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  // this import is required because it contains the onEnd method\n  await pool.import(Require.resolve('./worker.js'))\n\n  await pool.end({ 'pid': 10000 }) // also establishes is ready\n  await test.throwsAsync(pool.ping()) // , { 'instanceOf': WorkerPoolDisconnectedError })\n\n})\n\nTest.skip('WorkerPool.kill()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await test.notThrowsAsync(pool.ping()) // establishes is ready\n    await pool.kill()\n    await test.notThrowsAsync(pool.ping()) // the pool should recreate killed processes\n  \n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.uncaughtException()', async (test) => {\n\n  let pool = new WorkerPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.uncaughtException()\n    await test.notThrowsAsync(pool.ping()) // the pool should recreate exited processes\n  \n  } finally {\n    await pool.end()\n  }\n\n})\n \nTest.skip('WorkerPool.unhandledRejection()', async (test) => {\n\n  // this test requires that unhandled promises exit the node process\n  // this is enabled by the --unhandled-rejections=strict argument\n\n  let pool = new LoggedPool({ 'numberOfProcess': 2 })\n\n  try {\n\n    await pool.unhandledRejection()\n    await test.notThrowsAsync(pool.ping()) // the pool should recreate exited processes\n  \n  } finally {\n    await pool.end()\n  }\n\n})\n\nTest.skip('WorkerPool.kill() when maximumNumberOfCreate is 0', async (test) => {\n\n  let pool = new WorkerPool({ 'maximumNumberOfCreate': 0, 'numberOfProcess': 2 })\n\n  await test.notThrowsAsync(pool.ping()) // establishes is ready\n  await pool.kill()\n  await test.throwsAsync(pool.ping()) // the pool will not recreate killed processes\n\n})\n\n"],"file":"worker-pool.test.js"}