{"version":3,"sources":["../../source/library/worker-pool.js"],"names":["Process","process","WorkerPool","ChildProcessPool","constructor","parameter","WorkerPoolParameter","getConstructorParameter","_module","Proxy","WorkerPoolModuleHandler","_createProcess","index","path","option","WorkerClient","Configuration","merge","env","_selectProcess","ping","_getProcess","maximumDuration","value","_getConnectedProcess","forEach","workerClient","module","length","pingResult","Promise","all","map","reduce","minimumResult","result","Is","null","cpuUsage","WorkerPoolDisconnectedError","apply","methodName","disconnect","exit","code","kill"],"mappings":"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","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { Is } from '@virtualpatterns/mablung-is'\n\nimport { ChildProcessPool } from './child-process-pool.js'\nimport { WorkerClient } from './worker-client.js'\nimport { WorkerPoolModuleHandler } from './worker-pool-module-handler.js'\nimport { WorkerPoolParameter } from './worker-pool-parameter.js'\n\nimport { WorkerPoolDisconnectedError } from './error/worker-pool-disconnected-error.js'\n\nconst Process = process\n\nclass WorkerPool extends ChildProcessPool {\n\n  constructor(...parameter) {\n    super(...WorkerPoolParameter.getConstructorParameter(...parameter))\n\n    this._module = new Proxy(this, WorkerPoolModuleHandler)\n    \n  }\n\n  _createProcess(index, path, parameter, option) {\n    return new WorkerClient(path, parameter, Configuration.merge(option, { 'env': Configuration.merge(Process.env, { 'WORKER_POOL_INDEX': index }) }))\n  }\n\n  async _selectProcess(/* methodName, parameter */) {\n    let { index } = await this.ping()\n    return this._getProcess(index)\n  }\n\n  get maximumDuration() {\n    return this.option.maximumDuration\n  }\n\n  set maximumDuration(value) {\n    this.option.maximumDuration = value\n    this._getConnectedProcess().forEach((workerClient) => workerClient.maximumDuration = value)\n  }\n\n  get module() {\n    return this._module\n  }\n\n  async ping() {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n\n      let pingResult = null\n      pingResult = await Promise.all(process.map((workerClient) => workerClient.ping()))\n      pingResult = pingResult.reduce((minimumResult, result) => Is.null(minimumResult) || result.cpuUsage < minimumResult.cpuUsage ? result : minimumResult, null)\n  \n      return pingResult\n\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n  \n  async apply(methodName, parameter) {\n    return (await this._selectProcess(methodName, parameter)).apply(methodName, parameter)\n  }\n\n  async disconnect() {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n      return Promise.all(process.map((workerClient) => workerClient.disconnect()))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  async exit(code = 0) {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n      return Promise.all(process.map((workerClient) => workerClient.exit(code)))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n  async kill(...parameter) {\n\n    let process = this._getConnectedProcess()\n\n    if (process.length > 0) {\n      return Promise.all(process.map((workerClient) => workerClient.kill(...parameter)))\n    } else {\n      throw new WorkerPoolDisconnectedError()\n    }\n\n  }\n\n}\n\nexport { WorkerPool }"],"file":"worker-pool.cjs"}