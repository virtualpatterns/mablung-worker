{"version":3,"sources":["../../source/sandbox/fork.js"],"names":["Process","process","Require","require","on","console","log","childProcess","ChildProcess","fork","resolve","_onMessage","message","dir","send","error","setTimeout","exit","_onExit"],"mappings":";;AAAA;;AACA;;;;AAEA,MAAMA,OAAO,GAAGC,OAAhB;AACA,MAAMC,OAAO,GAJbC,OAIA;AAEAH,OAAO,CAACI,EAAR,CAAW,MAAX,EAAmB,MAAM;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACD,CAFD;;AAIA,IAAIC,YAAY,GAAGC,uBAAaC,IAAb,CAAkBP,OAAO,CAACQ,OAAR,CAAgB,cAAhB,CAAlB,EAAkD;AACnE;AACA,mBAAiB,UAFkD;AAGnE,WAAS;AAH0D,CAAlD,CAAnB,C,CAMA;AACA;AACA;AACA;AACA;;;AAEAH,YAAY,CAACH,EAAb,CAAgB,SAAhB,EAA2BG,YAAY,CAACI,UAAb,GAA2BC,OAAD,IAAa;AAChEP,EAAAA,OAAO,CAACC,GAAR,CAAY,qFAAZ;AACAD,EAAAA,OAAO,CAACQ,GAAR,CAAYD,OAAZ;AACAL,EAAAA,YAAY,CAACO,IAAb,CAAkB;AAAE,YAAQ;AAAV,GAAlB,EAAsCC,KAAD,IAAW;AAC9C,QAAIA,KAAJ,EAAW;AACTV,MAAAA,OAAO,CAACU,KAAR,CAAcA,KAAd;AACD,KAFD,MAEO;AACLC,MAAAA,UAAU,CAAChB,OAAO,CAACiB,IAAT,EAAe,IAAf,CAAV,CADK,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,GAbD;AAcD,CAjBD;AAmBAV,YAAY,CAACH,EAAb,CAAgB,MAAhB,EAAwBG,YAAY,CAACW,OAAb,GAAuB,MAAM;AACnDb,EAAAA,OAAO,CAACC,GAAR,CAAY,wEAAZ;AACD,CAFD","sourcesContent":["import ChildProcess from 'child_process'\nimport { createRequire } from 'module'\n\nconst Process = process\nconst Require = __require\n\nProcess.on('exit', () => {\n  console.log('PARENT Process.on(\\'exit\\', () => { ... })')\n})\n\nlet childProcess = ChildProcess.fork(Require.resolve('./forked.js'), {\n  // 'execArgv': [ '--inspect' ],\n  'serialization': 'advanced',\n  'stdio': 'inherit'\n})\n\n// setTimeout(() => {\n//   console.log('PARENT ChildProcess.send({ \\'type\\': \\'ping\\' })')\n//   childProcess.send({ 'type': 'ping' })\n//   childProcess.off('message', childProcess._onMessage)\n// }, 5000)\n\nchildProcess.on('message', childProcess._onMessage = (message) => {\n  console.log('PARENT ChildProcess.on(\\'message\\', childProcess._onMessage = (message) => { ... })')\n  console.dir(message)\n  childProcess.send({ 'type': 'end' }, (error) => {\n    if (error) {\n      console.error(error)\n    } else {\n      setTimeout(Process.exit, 5000)\n      // childProcess.send({ 'type': 'end' }, (error) => {\n      //   if (error) {\n      //     console.error(error)\n      //   } else {\n      //     Process.exit()\n      //   }\n      // })\n    }\n  })\n})\n\nchildProcess.on('exit', childProcess._onExit = () => {\n  console.log('PARENT ChildProcess.on(\\'exit\\', childProcess._onExit = () => { ... })')\n})\n"],"file":"fork.cjs"}